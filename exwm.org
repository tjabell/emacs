** CUSTOM EXWM DO NOT COMMIT FOR NOW
#+begin_src emacs-lisp
  (defun tja-exwm-config ()
    "Default configuration of EXWM."
    ;; Set the initial workspace number.
    (unless (get 'exwm-workspace-number 'saved-value)
      (setq exwm-workspace-number 5))
    ;; Make class name the buffer name
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (exwm-workspace-rename-buffer exwm-class-name)))
    ;; Global keybindings.
    (unless (get 'exwm-input-global-keys 'saved-value)
      (setq exwm-input-global-keys
            `(
              ;; 's-r': Reset (to line-mode).
              ([?\s-r] . exwm-reset)
              ;; 's-w': Switch workspace.
              ([?\s-w] . exwm-workspace-switch)
              ;; 's-&': Launch application.
              ([?\s-&] . (lambda (command)
                           (interactive (list (read-shell-command "$ ")))
                           (start-process-shell-command command nil command)))
              ;; 's-o': Other window
              ([?\s-o] . other-window)
              ;; 's-N': Switch to certain workspace.
              ,@(mapcar (lambda (i)
                          `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                              (interactive)
                              (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9)))))
    ;; Line-editing shortcuts
    (unless (get 'exwm-input-simulation-keys 'saved-value)
      (setq exwm-input-simulation-keys
            '(([?\C-b] . [left])
              ([?\C-f] . [right])
              ([?\C-p] . [up])
              ([?\C-n] . [down])
              ([?\C-a] . [home])
              ([?\C-e] . [end])
              ([?\M-v] . [prior])
              ([?\C-v] . [next])
              ([?\C-d] . [delete])
              ([?\C-k] . [S-end delete]))))

    (exwm-input-set-key (kbd "s-<f12>")
                      (lambda () (interactive)
                        (start-process "" nil "xss-lock" "--" "slock")
                        (start-process "" nil "systemctl" "suspend")))

    (exwm-input-set-key (kbd "s-o")
                    (lambda () (interactive) (other-window 1)))

    ;; Enable EXWM
    (exwm-enable))

  (use-package exwm
    :config
    (tja-exwm-config))

  (use-package exwm-config
    :config
    ;; Other configurations
    (exwm-config-misc)
    :straight nil)


#+end_src

*** Additional EXWM Customizations/Extensions
#+begin_src emacs-lisp
  (exwm-workspace-switch-create 1)
  
  
  ;; From https://emacs.stackexchange.com/questions/33326/how-do-i-cut-and-paste-effectively-between-applications-while-using-exwm
  (defun fhd/exwm-input-line-mode ()
    "Set exwm window to line-mode and show mode line"
    (call-interactively #'exwm-input-grab-keyboard)
    (exwm-layout-show-mode-line))

  (defun fhd/exwm-input-char-mode ()
    "Set exwm window to char-mode and hide mode line"
    (call-interactively #'exwm-input-release-keyboard)
    (exwm-layout-hide-mode-line))

  (defun fhd/exwm-input-toggle-mode ()
    "Toggle between line- and char-mode"
    (interactive)
    (message "hello")
    (with-current-buffer (window-buffer)
      (when (eq major-mode 'exwm-mode)
        (if (equal (second (second mode-line-process)) "line")
            (fhd/exwm-input-char-mode)
          (fhd/exwm-input-line-mode)))))

  ;; (exwm-input-set-key (kbd "s-i") #'fhd/exwm-input-toggle-mode)
  (exwm-input-set-key (kbd "s-i") #'exwm-input-toggle-keyboard)

  (defun fhd/toggle-exwm-input-line-mode-passthrough ()
    (interactive)
    (if exwm-input-line-mode-passthrough
        (progn
          (setq exwm-input-line-mode-passthrough nil)
          (message "App receives all the keys now (with some simulation)"))
      (progn
        (setq exwm-input-line-mode-passthrough t)
        (message "emacs receives all the keys now")))
    (force-mode-line-update))


  (exwm-input-set-key (kbd "s-p") 'fhd/toggle-exwm-input-line-mode-passthrough)
#+end_src
