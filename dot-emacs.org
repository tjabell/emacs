-*- coding: utf-8 -*-
#+title: Emacs: New Config in an Org file
#+STARTUP: show3levels
#+property: header-args:emacs-lisp  :tangle ~/.emacs
* New Emacs configuration file

* [Local/Optional when editing] Add hook for saving this file to also tangle it
https://emacs.stackexchange.com/questions/41019/buffer-local-after-save-hook
#+begin_src emacs-lisp :tangle no
  (add-hook 'after-save-hook 'org-babel-tangle nil t)
#+end_src

#+RESULTS:
| org-babel-tangle | t |

* [Fix] For using multibyte characters
Ended up putting -*- coding: utf-8 -*- on top of the file
otherwide ⤵ would get converted to bytes when opening this file

* System config and some basic keys and programming packages

** Base bootstrap config for straight.el and use-package replacement
#+begin_src emacs-lisp
;;; Some base emacs gc config
(toggle-debug-on-error t)
(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024 2))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)

;;; Bootstrap Straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;;;;  Effectively replace use-package with straight-use-package
;;; https://github.com/raxod502/straight.el/blob/develop/README.md#integration-with-use-package
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)

(setq use-package-verbose t)
#+end_src

#+RESULTS:
: t

** Theme
#+begin_src emacs-lisp
(straight-use-package 'spacemacs-theme)

(load-theme 'tango-dark)

(if (fboundp 'tool-bar-mode)
    (progn
      (tool-bar-mode 0)
      (scroll-bar-mode 0))
  nil)

(menu-bar-mode 0)

(setq inhibit-startup-screen t)
#+end_src

#+RESULTS:
: t

** Backup settings

Creates a .saves directory and puts backup files in there.

Shuts off backup creation for remote files
#+begin_src emacs-lisp 
  ;; Backup settings
  (setq
   make-backup-files t
   backup-by-copying t
   backup-directory-alist '(("." . "~/.saves"))
   delete-old-versions t
   auto-save-mode nil
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

  ;;To turn off the backup feature for remote files and stop TRAMP from saving to the backup directory, use this:
  (add-to-list 'backup-directory-alist
	       (cons tramp-file-name-regexp nil))
#+end_src

#+RESULTS:
: ((^/\(\(?:\([[:alnum:]-]+\):\(?:\([^/|: 	]+\)@\)?\(\(?:[[:alnum:]_.%-]+\|\[\(?:\(?:[[:alnum:]]*:\)+[[:alnum:].]+\)?]\)\(?:#[[:digit:]]+\)?\)?|\)+\)?\([[:alnum:]-]+\):\(?:\([^/|: 	]+\)@\)?\(\(?:[[:alnum:]_.%-]+\|\[\(?:\(?:[[:alnum:]]*:\)+[[:alnum:].]+\)?]\)\(?:#[[:digit:]]+\)?\)?:\([^
: ]*\'\)) (. . ~/.saves))

** Other window as M-o is nice
#+begin_src emacs-lisp 
  (global-set-key (kbd "M-o") 'other-window)
#+end_src

#+RESULTS:
: other-window

** Key chord mode
#+begin_src emacs-lisp
    (use-package key-chord
      :init
      (key-chord-mode 1)
      :config
      (progn (key-chord-define-global "qf" 'find-file)
	     (key-chord-define-global "qk" 'kill-this-buffer)))
#+end_src

#+RESULTS:
: t

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

* Org mode, org-tempo, org bullets, org-roam
** Main org config
Org ellipsis has been bugging out tangle a little bit.
   The arrow is 2935: RET ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS"
   to input: type "C-x 8 RET 2935" or "C-x 8 RET ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS"
#+begin_src emacs-lisp 
  (use-package org
    :init (progn
	    (setq org-ellipsis " ⤵")
	    (setq org-todo-keywords
		  '((sequence "TODO" "IN-PROGRESS" "TEST" "DONE")))
	    (setq org-capture-templates
		  '(("t" "Todo" entry
		     (file+headline "~/projects/me/todo_misc.org" "Inbox")
		     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
		    ("g" "Goddard Todo" entry
		     (file+headline "~/projects/goddard/todo_goddard.org" "Inbox")
		     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
		    ("e" "ESA Todo" entry
		     (file+headline "~/projects/extended_stay/todo_esa.org" "Inbox")
		     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
		    ("a" "ACDHH CDBMS Todo" entry
		     (file+headline "~/projects/acdhh/todo_acdhh-cdbms.org" "Inbox")
		     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)))
	    (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
	    (setq org-agenda-file-regexp "\\`[^.].*\\.org'\\|[0-9]+")
	    (setq org-hide-emphasis-markers t)
	    (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
	    (setq org-cycle-separator-lines -1))
    :bind (("C-c c" . org-capture)
	   ("C-c C-x C-j" . org-clock-goto)         
	   ("C-c C-x m" . org-meta-return)
	   ("C-c C-x r" . org-metaright)
	   ("C-c C-x l" . org-metaleft)
	   ( "C-c l" . org-store-link)
	   ( "C-c c" . org-capture)
	   ( "C-c a" . org-agenda)
	   ( "C-c b" . org-iswitchb)
	   :map org-mode-map
	   ("C-c C-x C-u" . org-clock-update-time-maybe))
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))  
    :custom
    (org-confirm-babel-evaluate nil)
    (org-babel-default-header-args:C
     (cons '(:tangle . "yes")
	   (assq-delete-all :tangle org-babel-default-header-args))))

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook
	      (lambda ()
		(org-bullets-mode 1)
		(variable-pitch-mode 1))))

  (require 'org-tempo)  
#+end_src

#+RESULTS:
: org-tempo

** Configure org babel languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ruby . t)
     (emacs-lisp . t)
     (python . t)
     (perl . t)
     (haskell . t)
     (C . t)
     (shell . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

#+RESULTS:
: ((conf-unix . conf-unix) (redis . redis) (php . php) (arduino . arduino) (conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))

** Org contrib.  I forget why this was in here but I think it was important
#+begin_src emacs-lisp
(use-package org-contrib)
#+end_src
#+RESULTS:

** Org Roam
Configures org roam, dailies, tags, capture templates
#+begin_src emacs-lisp 
  (use-package org-roam
    :defer 3
    :init
    (setq org-roam-directory "~/org-roam")
    (setq org-roam-v2-ack t)
    (if (boundp 'org-roam-directory)
      (unless (file-exists-p org-roam-directory)
	  (make-directory org-roam-directory)))
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
	"%?"
	:target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ("v" "video" plain
	"\n* Source\n\nLink: %^{Link}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
	:target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	:unnarrowed t)
       ))
    :bind (("C-c t" . org-roam-tag-add)
	   ("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c d" . org-roam-dailies-goto-today)
	   ("C-c o" . org-roam-node-find)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (org-roam-setup)
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode))


  (require 'org-roam-dailies)

  (setq org-roam-dailies-directory "daily/")
#+end_src

#+RESULTS:
: daily/

* Completing Read Configuration: Vertico|Savehist|Marginalia|Consult|Orderless|Embark|Etc...
** Vertico
#+begin_src emacs-lisp 
  (use-package vertico
  :ensure t
  :config    
  ;; Cycles through the buffer list whne you hit the bottom
  (setq vertico-cycle t)
  :bind (:map minibuffer-local-map
	      ;; Matching old ivy behavior
	      ("C-l" . backward-kill-word)
	      ;; Binding to allow inserting the current selection
	      ("C-j" . vertico-insert))
  :init
  (vertico-mode))
#+end_src

#+RESULTS:
: vertico-insert

Other packages to look into
  Consult: Collection of commands that provide additional completions
  Savehist: saves recent files at the top of the list
  Embark: Can use Embark for actions in Vertico
  Orderless: Searching across completions
  Selectrum: Alternative to Vertico, less minimal but similar principles

** Savehist
   Built into emacs already
   https://www.emacswiki.org/emacs/SaveHist

   Can fine tune with savehist-save-minibuffer-history

   Saves history of recently opened buffers, commands, etc...
#+begin_src emacs-lisp 
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

#+RESULTS:

** Marginalia
   "Marginalia are marks made in the margins of a book or other document. They may be scribbles, comments, glosses, critiques, doodles, or illuminations."
   [[https://en.wikipedia.org/wiki/Marginalia][Wikipedia]]
*** What it does
Improves margin information around completions

uses annotators

*** Config
#+begin_src emacs-lisp 
  (use-package marginalia
    :after vertico
    :ensure t
    ;; Marginalia-cycle will switch through different annotators on each file
    :bind (("M-A" . marginalia-cycle)
	 :map minibuffer-local-map
	 ("M-A" . marginalia-cycle))   
    :init
    (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia-cycle

*** Basic face annotator
#+begin_src emacs-lisp
  ;; Create annotator
  (defun my-face-annotator (cand)
    (when-let (sym (intern-soft cand))
      (concat (propertize " " 'display '(space :align-to center))
	      (propertize "The quick brown fox jumps over the lazy dog" 'face sym))))

  ;; Wire it up in the registry
  (add-to-list 'marginalia-annotator-registry
	       '(face my-face-annotator marginalia-annotate-face builtin none))
#+end_src

#+RESULTS:
| face                 | my-face-annotator                        | marginalia-annotate-face    | builtin | none |
| command              | marginalia-annotate-command              | marginalia-annotate-binding | builtin | none |
| embark-keybinding    | marginalia-annotate-embark-keybinding    | builtin                     | none    |      |
| customize-group      | marginalia-annotate-customize-group      | builtin                     | none    |      |
| variable             | marginalia-annotate-variable             | builtin                     | none    |      |
| function             | marginalia-annotate-function             | builtin                     | none    |      |
| face                 | marginalia-annotate-face                 | builtin                     | none    |      |
| color                | marginalia-annotate-color                | builtin                     | none    |      |
| unicode-name         | marginalia-annotate-char                 | builtin                     | none    |      |
| minor-mode           | marginalia-annotate-minor-mode           | builtin                     | none    |      |
| symbol               | marginalia-annotate-symbol               | builtin                     | none    |      |
| environment-variable | marginalia-annotate-environment-variable | builtin                     | none    |      |
| input-method         | marginalia-annotate-input-method         | builtin                     | none    |      |
| coding-system        | marginalia-annotate-coding-system        | builtin                     | none    |      |
| charset              | marginalia-annotate-charset              | builtin                     | none    |      |
| package              | marginalia-annotate-package              | builtin                     | none    |      |
| imenu                | marginalia-annotate-imenu                | builtin                     | none    |      |
| bookmark             | marginalia-annotate-bookmark             | builtin                     | none    |      |
| file                 | marginalia-annotate-file                 | builtin                     | none    |      |
| project-file         | marginalia-annotate-project-file         | builtin                     | none    |      |
| buffer               | marginalia-annotate-buffer               | builtin                     | none    |      |
| consult-multi        | marginalia-annotate-consult-multi        | builtin                     | none    |      |

Disabling Annotators
https://github.com/minad/marginalia#disabling-annotators-builtin-or-lightweight-annotators

** Consult
   My configuration for consult
#+begin_src emacs-lisp 
    (use-package consult
      :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ("C-c b" . consult-bookmark)
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("C-s" . consult-line)                   ;; needed by consult-line to detect isearch
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . isearch-forward)
         ("M-s L" . consult-line-multi)
         ("M-s t" . consult-theme))
      :config
      ;; Configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-."))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-file consult--source-project-file consult--source-bookmark
       :preview-key (kbd "M-."))
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-root-function #'projectile-project-root)
      ;; Configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<")
      )
#+end_src

#+RESULTS:
: consult-theme
  
** Orderless

   Completion style package.  Uses space separated components to match candidates.
#+begin_src emacs-lisp 
    (use-package orderless
      :ensure t
      :custom (completion-styles '(orderless)))

  (defun flex-if-twiddle (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun first-initialism (pattern index _total)
    (if (= index 0) 'orderless-initialism))

  (defun without-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))

  (setq orderless-matching-styles '(orderless-regexp)
	orderless-style-dispatchers '(flex-if-twiddle
				      without-if-bang))

  (defun my/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
		orderless-style-dispatchers nil))

  (define-key vertico-map (kbd "M-l")
    #'my/match-components-literally)
#+end_src

#+RESULTS:
: my/match-components-literally

*** Orderless scratch:

Minibuffer completion map toggle C-l to get orderless literal style
#+begin_src emacs-lisp :tangle no
  (setq orderless-matching-styles '(orderless-regexp)
	orderless-style-dispatchers '(flex-if-twiddle
				      without-if-bang))

  (defun my/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
		orderless-style-dispatchers nil))

  (define-key minibuffer-local-completion-map (kbd "M-l")
    #'my/match-components-literally)

  (define-key vertico-map (kbd "M-l")
    #'my/match-components-literally)
#+end_src

#+RESULTS:
: my/match-components-literally

** Embark and embark-consult
Everything goes through `embark-act`

Learning embark
#+begin_src emacs-lisp 
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ;;; Right now this is jump to definition.  I need to find a good key for this   
     ;;;("C-;" . embark-dwim)        ;; good alternative: M-. 
     ;;; Right now this is jump to definition.  I need to find a good key for this   
     ;;;("M-." . embark-dwim)        ;; 
     ;;;("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
     )
    ;;:init

    ;; Optionally replace the key help with a completing-read interface
    ;;(setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult))
#+end_src

#+RESULTS:

*** Interesting functions
embark-collect-snapshot: like occur kind of
embark-export: tries to open a buffer in an appropriate major mode
embark-become: switches the command but keeps input

** App launcher
   #+begin_src emacs-lisp 
     (use-package app-launcher
       :straight '(app-launcher :host github :repo "SebastienWae/app-launcher")
       :bind ("C-c C-SPC" . app-launcher-run-app))
   #+end_src

   #+RESULTS:
   : app-launcher-run-app

** Consult-lsp

** Consult-dir

* Projectile | Consult-projectile
   #+begin_src emacs-lisp 
     (use-package project
       :custom
       (project-vc-merge-submodules . nil))

     (use-package projectile
       :bind-keymap ("C-c p" . projectile-command-map))

     (use-package consult-projectile
       :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))

     ;; we need this wrapper to match Projectile's API
     (defun projectile-project-current (dir)
       "Retrieve the root directory of the project at DIR using `project-current'."
       (cdr (project-current nil dir)))

     (setq projectile-project-root-functions '(projectile-project-current))
   #+end_src   

   #+RESULTS:
   | projectile-project-current |

* Company
#+begin_src emacs-lisp
(use-package company
  :hook (after-init . global-company-mode)
  :config (progn
            (setq company-idle-delay 0.0
                  company-minimum-prefix-length 1)))
#+end_src

#+RESULTS:
| global-company-mode | org-persist-read-all | #[0 \302=\205	 \303	!\207 [window-system pgtk-use-im-context-on-new-connection pgtk pgtk-use-im-context] 2] | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |

* Magit
#+begin_src emacs-lisp 
(use-package magit
  :bind
  ("<f10>" . magit-status)
  ("C-x g" . magit-status))
#+end_src

#+RESULTS:
: magit-status

* Vterm | vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm
    :init (setq vterm-max-scrollback 2000))
  (use-package vterm-toggle
    :bind
    ("<f12>" . vterm-toggle)
    ("C-<f12>" . vterm-toggle-cd))
#+end_src

#+RESULTS:
: vterm-toggle-cd

* Modeline (Doom)
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

#+RESULTS:

* Open this file to start
#+begin_src emacs-lisp
(find-file "~/emacs/dot-emacs.org")
#+end_src
* --------- Experimental FOR NOW ---------

** MCT mode
#+begin_src emacs-lisp :tangle no
(straight-use-package '(mct :repo "protesilaos/mct"
			    :host gitlab))

(mct-mode 1)

(setq mct-remove-shadowed-file-names t) ; works when `file-name-shadow-mode' is enabled
(setq mct-hide-completion-mode-line t)
(setq mct-show-completion-line-numbers nil)
(setq mct-apply-completion-stripes t)
(setq mct-minimum-input 3)
(setq mct-live-update-delay 0.0)
#+end_src

#+RESULTS:
: 0.0

** Consult
Consult is a large package the looks like it replaces swiper

Here is a sample configuration I'm going through from the website
https://github.com/minad/consult

#+begin_src emacs-lisp :tangle no
  ;; Example configuration for Consult from minad/consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (("M-s l" . isearch-forward)
	   ("C-s" . consult-line)
	   ;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c b" . consult-bookmark)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ("<help> a" . consult-apropos)            ;; orig. apropos-command
	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings (search-map)
	   ("M-s f" . consult-find)
	   ("M-s F" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s m" . consult-multi-occur)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)
	   ("M-s t" . consult-theme))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Vertico, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
	  (lambda ()
	    (when-let (project (project-current))
	      (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )
#+end_src

#+RESULTS:
: consult-theme

** Consult-dir

#+begin_src emacs-lisp :tangle no
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

#+RESULTS:
: consult-dir-jump-file

https://github.com/karthink/consult-dir

Swap vertico-map with  minibuffer-local-completion-map if not using vertico


** Affe
Fuzzy finder

