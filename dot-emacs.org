;;-*- coding: utf-8; lexical-binding: t; -*-
#+title: Emacs: New Config in an Org file
#+STARTUP: overview
#+property: header-args:emacs-lisp  :tangle ~/.emacs :results none
* New Emacs configuration file

* Native compilation
#+begin_src emacs-lisp
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)
#+end_src

* [Fix] For using multibyte characters
Ended up putting -*- coding: utf-8 -*- on top of the file
otherwide ⤵ would get converted to bytes when opening this file

* System config and some basic keys and programming packages

** Auto mode alist config (dot files)

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\zshrc$" . sh-mode))
#+end_src

** [Optional] If debugging this may help

#+begin_src emacs-lisp :tangle no
  (toggle-debug-on-error t)
#+end_src

** Base bootstrap config for straight.el and use-package replacement
#+begin_src emacs-lisp
  ;;; Some base emacs gc config
  (setq gc-cons-threshold (* 100 1024 1024)
	read-process-output-max (* 1024 1024 3))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		       (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

  ;;; Bootstrap Straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;;;;  Effectively replace use-package with straight-use-package
  ;;; https://github.com/raxod502/straight.el/blob/develop/README.md#integration-with-use-package
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (setq use-package-verbose t)
#+end_src

#+RESULTS:
: t

** Custom on ws laptop, load exwm

#+begin_src emacs-lisp
  (when (string-equal (system-name) "trevor-laptop2")
    (org-babel-load-file "~/emacs/exwm.org"))
#+end_src

** Theme | Disable Menu Bar | Inihibit Startup

#+begin_src emacs-lisp

(straight-use-package 'spacemacs-theme)

(load-theme 'tango-dark)

(if (fboundp 'tool-bar-mode)
    (progn
      (tool-bar-mode 0)
      (scroll-bar-mode 0))
  nil)

(menu-bar-mode 0)

(setq inhibit-startup-screen t)

#+end_src

#+RESULTS:
: t

** Font
#+begin_src emacs-lisp
;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :weight 'light)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    ;; :font "Cantarell"
                    :font "Iosevka Aile"
                    :weight 'light)
#+end_srch

** Backup settings

Creates a .saves directory and puts backup files in there.

Shuts off backup creation for remote files
#+begin_src emacs-lisp
    ;; Backup settings
    (setq
     make-backup-files t
     backup-by-copying t
     backup-directory-alist '(("." . "~/.saves"))
     delete-old-versions t
     auto-save-mode nil
     auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

    ;;; Disable auto-save and auto-backup.
    ;;; Especially in development directories, we can't have emacs creating random #lockfiles# everywhere
    (setq create-lockfiles nil)
    (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))
    ;;; End Disable auto-save and auto-backup

    ;;To turn off the backup feature for remote files and stop TRAMP from saving to the backup directory, use this:
    (add-to-list 'backup-directory-alist
		 (cons tramp-file-name-regexp nil))
#+end_src

#+RESULTS:
: ((^/\(\(?:\([[:alnum:]-]+\):\(?:\([^/|: 	]+\)@\)?\(\(?:[[:alnum:]_.%-]+\|\[\(?:\(?:[[:alnum:]]*:\)+[[:alnum:].]+\)?]\)\(?:#[[:digit:]]+\)?\)?|\)+\)?\([[:alnum:]-]+\):\(?:\([^/|: 	]+\)@\)?\(\(?:[[:alnum:]_.%-]+\|\[\(?:\(?:[[:alnum:]]*:\)+[[:alnum:].]+\)?]\)\(?:#[[:digit:]]+\)?\)?:\([^
: ]*\'\)) (.* . /tmp/))

** Visible Bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

** Other window as M-o is nice
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src

#+RESULTS:
: other-window

** Key chord mode
#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (key-chord-mode 1)
    :config
    (progn (key-chord-define-global "qf" 'find-file)
           (key-chord-define-global "qk" 'kill-this-buffer)
           (key-chord-define-global "qr" 'next-buffer)
           (key-chord-define-global "ql" 'previous-buffer)))
#+end_src

#+RESULTS:
: t

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Add lisp extension directory to load path
#+begin_src emacs-lisp
  (add-to-list 'load-path "/home/trevor/emacs/lisp/")
#+end_src

** Use spaces instead of tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Turn off symlink warning
Found in [[file:/usr/share/emacs/28.0.60/lisp/vc/vc-hooks.el::or (not (eq vc-follow-symlinks 'ask][vc-hooks.el]]

or group vc

#+begin_src emacs-lisp
  (custom-set-variables '(vc-follow-symlinks t))
#+end_src

** Enable narrow-to-region

#+begin_src emacs-lisp
  (enable-command #'narrow-to-region)
#+end_src

** Window Management

Transpose Frame, to rotate, flip, flop frames

https://www.emacswiki.org/emacs/TransposeFrame

#+begin_src emacs-lisp
  (use-package transpose-frame)
#+end_src

Storing an arrangement in a register:

Rotate windows from emacs wiki
https://www.emacswiki.org/emacs/TransposeWindows#:~:text=To%20swap%20the%20top%20and,window%2Dswap%2Dstates'%20.
#+begin_src emacs-lisp
  ;; https://www.emacswiki.org/emacs/TransposeWindows#:~:text=To%20swap%20the%20top%20and,window%2Dswap%2Dstates'%20.
  (defun rotate-windows (arg)
  "Rotate your windows; use the prefix argument to rotate the other direction"
  (interactive "P")
  (if (not (> (count-windows) 1))
      (message "You can't rotate a single window!")
    (let* ((rotate-times (prefix-numeric-value arg))
           (direction (if (or (< rotate-times 0) (equal arg '(4)))
                          'reverse 'identity)))
      (dotimes (_ (abs rotate-times))
        (dotimes (i (- (count-windows) 1))
          (let* ((w1 (elt (funcall direction (window-list)) i))
                 (w2 (elt (funcall direction (window-list)) (+ i 1)))
                 (b1 (window-buffer w1))
                 (b2 (window-buffer w2))
                 (s1 (window-start w1))
                 (s2 (window-start w2))
                 (p1 (window-point w1))
                 (p2 (window-point w2)))
            (set-window-buffer-start-and-point w1 b2 s2 p2)
            (set-window-buffer-start-and-point w2 b1 s1 p1)))))))
#+end_src

Swaps windows and lets you choose which to swap
#+begin_src emacs-lisp
  (setq swapping-buffer nil)
  (setq swapping-window nil)
  (defun swap-buffers-in-windows ()
      "Swap buffers between two windows"
      (interactive)
      (if (and swapping-window
               swapping-buffer)
          (let ((this-buffer (current-buffer))
                (this-window (selected-window)))
            (if (and (window-live-p swapping-window)
                     (buffer-live-p swapping-buffer))
                (progn (switch-to-buffer swapping-buffer)
                       (select-window swapping-window)
                       (switch-to-buffer this-buffer)
                       (select-window this-window)
                       (message "Swapped buffers."))
              (message "Old buffer/window killed.  Aborting."))
            (setq swapping-buffer nil)
            (setq swapping-window nil))
        (progn
          (setq swapping-buffer (current-buffer))
          (setq swapping-window (selected-window))
          (message "Buffer and window marked for swapping."))))
#+end_src

* Org mode, org-tempo, org bullets, org-roam

** Main org config
Org ellipsis has been bugging out tangle a little bit.
   The arrow is 2935: RET ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS"
   to input: type "C-x 8 RET 2935" or "C-x 8 RET ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS"

   fixed by putting a -*- coding: utf-8 -*- at the top of this file

#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :init (progn
            (setq org-ellipsis " ⤵")
            (setq org-todo-keywords
                  '((sequence "TODO" "IN-PROGRESS" "TEST" "DONE")))
            (setq org-capture-templates
                  '(("t" "Todo" entry
                     (file+headline "~/projects/me/todo_me.org" "Inbox")
                     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
                    ("g" "Goddard Todo" entry
                     (file+headline "~/projects/goddard/todo_goddard.org" "Inbox")
                     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
                    ("e" "ESA Todo" entry
                     (file+headline "~/projects/extended_stay/todo_esa.org" "Inbox")
                     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
                    ("a" "ACDHH CDBMS Todo" entry
                     (file+headline "~/projects/acdhh/todo_acdhh-cdbms.org" "Inbox")
                     "* TODO %?\n %i\n %a\n %i" :empty-lines 1)))
            (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
            (setq org-agenda-file-regexp "\\`[^.].*\\.org'\\|[0-9]+")
            (setq org-hide-emphasis-markers t)
            (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
            (setq org-cycle-separator-lines -1)
            (setq org-use-speed-commands t))
    :bind (("C-c c" . org-capture)
           ("C-c C-x C-j" . org-clock-goto)
           ( "C-c l" . org-store-link)
           ( "C-c c" . org-capture)
           ( "C-c a" . org-agenda)
           ( "C-c b" . org-iswitchb)
           :map org-mode-map
           ("C-c C-x C-u" . org-clock-update-time-maybe)
           ("C-c C-x m" . org-meta-return)
           ("C-c C-x r" . org-metaright)
           ("C-c C-x l" . org-metaleft)
           ("C-M-i" . completion-at-point))
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    :custom
    (org-confirm-babel-evaluate nil)
    (org-roam-completion-everywhere t)
    (org-babel-default-header-args:C
     (cons '(:tangle . "yes")
           (assq-delete-all :tangle org-babel-default-header-args)))
    (org-agenda-files '("~/projects/me/todo_me.org"
                        "~/projects/goddard/todo_goddard.org"
                        "~/projects/extended_stay/todo_esa.org"
                        "~/projects/parsus/parsus_misc.org"
                        "~/projects/parsus/meeting_updates.org"
                        "~/projects/acdhh/todo_acdhh-cdbms.org"
                        "~/projects/acdhh/todo_acdhh-www.org"))
    (org-columns-default-format "%25ITEM %TODO %3PRIORITY %TAGS")
    (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4))
    (org-agenda-start-with-clockreport-mode nil)
    (org-clock-in-resume t)
    (org-clock-in-switch-to-state "IN-PROGRESS")
    (org-clock-persist t)
    (org-clock-history-length 15))

  (use-package org-superstar
    :after org
    :hook ((org-mode . org-superstar-mode)
           (org-mode . (lambda () (variable-pitch-mode 1))))
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Supposedly not needed after org 9.2 (on 9.6-dev as of this comment)
  (when (version<= "9.2" (org-version))
    (require 'org-tempo))


  ;; Configuring font
  (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

#+RESULTS:
: org-tempo

** Get ob-rust for org babel rust
#+begin_src emacs-lisp
  (use-package ob-rust)
#+end_src

** Configure org babel languages
#+begin_src emacs-lisp
  (require 'ob-js)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ruby . t)
     (emacs-lisp . t)
     (python . t)
     (perl . t)
     (haskell . t)
     (C . t)
     (shell . t)
     (rust . t)
     (js . t)))

  (push '("conf" . conf-unix) org-src-lang-modes)

  (add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
#+end_src

#+RESULTS:
: ((conf-unix . conf-unix) (redis . redis) (php . php) (arduino . arduino) (conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))

* Completing Read Configuration: Vertico|Savehist|Marginalia|Consult|Orderless|Embark|Etc...
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    ;; Cycles through the buffer list whne you hit the bottom
    (setq vertico-cycle t)
    :bind (:map minibuffer-local-map
                ;; Matching old ivy behavior
                ("C-l" . backward-kill-word)
                ;; Binding to allow inserting the current selection
                ("C-j" . vertico-insert))
    :init
    (vertico-mode))
#+end_src

#+RESULTS:
: vertico-insert

Other packages to look into
  Consult: Collection of commands that provide additional completions
  Savehist: saves recent files at the top of the list
  Embark: Can use Embark for actions in Vertico
  Orderless: Searching across completions
  Selectrum: Alternative to Vertico, less minimal but similar principles

** Savehist
   Built into emacs already
   https://www.emacswiki.org/emacs/SaveHist

   Can fine tune with savehist-save-minibuffer-history

   Saves history of recently opened buffers, commands, etc...
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

#+RESULTS:

** Marginalia
   "Marginalia are marks made in the margins of a book or other document. They may be scribbles, comments, glosses, critiques, doodles, or illuminations."
   [[https://en.wikipedia.org/wiki/Marginalia][Wikipedia]]
*** What it does
Improves margin information around completions

uses annotators

*** Config
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :ensure t
    ;; Marginalia-cycle will switch through different annotators on each file
    :bind (("M-A" . marginalia-cycle)
	 :map minibuffer-local-map
	 ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia-cycle

*** Basic face annotator
#+begin_src emacs-lisp
  ;; Create annotator
  (defun my-face-annotator (cand)
    (when-let (sym (intern-soft cand))
      (concat (propertize " " 'display '(space :align-to center))
	      (propertize "The quick brown fox jumps over the lazy dog" 'face sym))))

  ;; Wire it up in the registry
  (add-to-list 'marginalia-annotator-registry
	       '(face my-face-annotator marginalia-annotate-face builtin none))
#+end_src

#+RESULTS:
| face                 | my-face-annotator                        | marginalia-annotate-face    | builtin | none |
| command              | marginalia-annotate-command              | marginalia-annotate-binding | builtin | none |
| embark-keybinding    | marginalia-annotate-embark-keybinding    | builtin                     | none    |      |
| customize-group      | marginalia-annotate-customize-group      | builtin                     | none    |      |
| variable             | marginalia-annotate-variable             | builtin                     | none    |      |
| function             | marginalia-annotate-function             | builtin                     | none    |      |
| face                 | marginalia-annotate-face                 | builtin                     | none    |      |
| color                | marginalia-annotate-color                | builtin                     | none    |      |
| unicode-name         | marginalia-annotate-char                 | builtin                     | none    |      |
| minor-mode           | marginalia-annotate-minor-mode           | builtin                     | none    |      |
| symbol               | marginalia-annotate-symbol               | builtin                     | none    |      |
| environment-variable | marginalia-annotate-environment-variable | builtin                     | none    |      |
| input-method         | marginalia-annotate-input-method         | builtin                     | none    |      |
| coding-system        | marginalia-annotate-coding-system        | builtin                     | none    |      |
| charset              | marginalia-annotate-charset              | builtin                     | none    |      |
| package              | marginalia-annotate-package              | builtin                     | none    |      |
| imenu                | marginalia-annotate-imenu                | builtin                     | none    |      |
| bookmark             | marginalia-annotate-bookmark             | builtin                     | none    |      |
| file                 | marginalia-annotate-file                 | builtin                     | none    |      |
| project-file         | marginalia-annotate-project-file         | builtin                     | none    |      |
| buffer               | marginalia-annotate-buffer               | builtin                     | none    |      |
| consult-multi        | marginalia-annotate-consult-multi        | builtin                     | none    |      |

Disabling Annotators
https://github.com/minad/marginalia#disabling-annotators-builtin-or-lightweight-annotators

** Consult
   My configuration for consult
#+begin_src emacs-lisp
    (use-package consult
      :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ("C-c b" . consult-bookmark)
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("C-s" . consult-line)                   ;; needed by consult-line to detect isearch
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . isearch-forward)
         ("M-s L" . consult-line-multi)
         ("M-s t" . consult-theme))
      :config
      ;; Configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-."))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-file consult--source-project-file consult--source-bookmark
       :preview-key (kbd "M-."))
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-root-function #'projectile-project-root)
      ;; Configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<")
      )
#+end_src

#+RESULTS:
: consult-theme

** Orderless

   Completion style package.  Uses space separated components to match candidates.
#+begin_src emacs-lisp
    (use-package orderless
      :ensure t
      :custom (completion-styles '(orderless)))

  (defun flex-if-twiddle (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun first-initialism (pattern index _total)
    (if (= index 0) 'orderless-initialism))

  (defun without-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))

  (setq orderless-matching-styles '(orderless-regexp)
	orderless-style-dispatchers '(flex-if-twiddle
				      without-if-bang))

  (defun my/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
		orderless-style-dispatchers nil))

  (define-key vertico-map (kbd "M-l")
    #'my/match-components-literally)
#+end_src

#+RESULTS:
: my/match-components-literally

*** Orderless scratch:

Minibuffer completion map toggle C-l to get orderless literal style
#+begin_src emacs-lisp :tangle no
  (setq orderless-matching-styles '(orderless-regexp)
	orderless-style-dispatchers '(flex-if-twiddle
				      without-if-bang))

  (defun my/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
		orderless-style-dispatchers nil))

  (define-key minibuffer-local-completion-map (kbd "M-l")
    #'my/match-components-literally)

  (define-key vertico-map (kbd "M-l")
    #'my/match-components-literally)
#+end_src

#+RESULTS:
: my/match-components-literally

** Embark and embark-consult
Everything goes through `embark-act`

Learning embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ;;; Right now this is jump to definition.  I need to find a good key for this
     ;;;("C-;" . embark-dwim)        ;; good alternative: M-.
     ;;; Right now this is jump to definition.  I need to find a good key for this
     ;;;("M-." . embark-dwim)        ;;
     ;;;("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
     )
    ;;:init

    ;; Optionally replace the key help with a completing-read interface
    ;;(setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult))
#+end_src

#+RESULTS:

*** Interesting functions
embark-collect-snapshot: like occur kind of
embark-export: tries to open a buffer in an appropriate major mode
embark-become: switches the command but keeps input

** App launcher
   #+begin_src emacs-lisp
     (use-package app-launcher
       :straight '(app-launcher :host github :repo "SebastienWae/app-launcher")
       :bind ("C-c C-SPC" . app-launcher-run-app))
   #+end_src

   #+RESULTS:
   : app-launcher-run-app

** Consult-lsp

** Consult-dir
TBD

* Which Key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)
    (which-key-setup-side-window-right))
#+end_src

#+RESULTS:
: t

* Projects: Projectile | Consult-projectile
   #+begin_src emacs-lisp
     (use-package project
       :custom
       (project-vc-merge-submodules . nil))

     (use-package projectile
       :bind-keymap ("C-c p" . projectile-command-map))

     (use-package consult-projectile
       :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))

     ;; we need this wrapper to match Projectile's API
     (defun projectile-project-current (dir)
       "Retrieve the root directory of the project at DIR using `project-current'."
       (cdr (project-current nil dir)))

     (setq projectile-project-root-functions '(projectile-project-current))

     (projectile-mode)
   #+end_src

   #+RESULTS:
   | projectile-project-current |

** Perspective
Doesnt activate on startup.  Maybe need to move it down.  What is bound to C-x x s on startup?
#+begin_src emacs-lisp
  (use-package perspective
    :bind (("C-x k" . persp-kill-buffer*))
    :config (persp-mode))
#+end_src

#+RESULTS:
: persp-kill-buffer*

* Company
#+begin_src emacs-lisp
    (use-package company
      :hook ((prog-mode . company-mode))
      :config (progn
                (setq company-idle-delay 0.0
                      company-minimum-prefix-length 3)))
#+end_src

#+RESULTS:
| global-company-mode | org-persist-read-all | #[0 \302=\205	 \303	!\207 [window-system pgtk-use-im-context-on-new-connection pgtk pgtk-use-im-context] 2] | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :config
    (require 'magit-extras)
    :bind
    ("<f10>" . magit-status)
    ("C-x g" . magit-status))
#+end_src

#+RESULTS:
: magit-status

** Forge
#+begin_src emacs-lisp
  (use-package forge
    :after magit
    :config (setcar forge-alist
		    '("github.com"
		      "api.github.com"
		      "github.com"
		      forge-github-repository)))
#+end_src

#+RESULTS:

* Vterm | vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm
    :init (setq vterm-max-scrollback 2000))
  (use-package vterm-toggle
    :bind
    ("<f12>" . vterm-toggle)
    ("C-<f12>" . vterm-toggle-cd))
#+end_src

#+RESULTS:
: vterm-toggle-cd

* Modeline (Doom)
#+begin_src emacs-lisp
  (use-package doom-themes)

  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

#+RESULTS:

* IDE/Development

** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.json" . json-mode)))
#+end_src

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Tree sitter (experimental)
#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (use-package tree-sitter-indent)
#+end_src

** LSP
#+begin_src emacs-lisp
  (setq my:csharp-lsp-server "/usr/bin/omnisharp")

  ;;; LSP
  ;; (use-package lsp-mode
  ;;   :hook (
  ;;          (csharp-tree-sitter-mode . lsp-deferred)
  ;;          (java-mode . lsp-deferred)
  ;;          )
  ;;   :init
  ;;   (setq lsp-keymap-prefix "C-c l")
  ;;   :commands lsp lsp-deferred
  ;;   :custom (lsp-csharp-server-path my:csharp-lsp-server))

  ;; (use-package lsp-ui
  ;;   :after (lsp-mode)
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom))

  (use-package eglot
    :config
    (add-to-list 'eglot-server-programs
                 `(csharp-tree-sitter-mode . ("/usr/bin/omnisharp" "-stdio" "-lsp"))))

  (add-to-list 'eglot-server-programs
                 `(csharp-tree-sitter-mode . ("/usr/bin/omnisharp" "-stdio" "-lsp")))
  (use-package flymake)

  (use-package treemacs
    :bind ("<f8>" . treemacs))

  ;; (use-package lsp-treemacs
  ;;   :after lsp)

  (use-package treemacs-projectile)
#+end_src

#+RESULTS:

** CSharp/Omnisharp with tree-sitter mode and dotnet

*** Csharp/omnisharp/dotnet

#+begin_src emacs-lisp
  (use-package csharp-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-mode)))
#+end_src

#+RESULTS:
| lsp-deferred |

#+begin_src emacs-lisp
  (use-package dotnet
    :hook (csharp-tree-sitter-mode . dotnet-mode)
    (csharp-mode . dotnet-mode))
#+end_src

** Java

*** LSP Java

#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . lsp-deferred))
#+end_src

** Flymake
#+begin_src emacs-lisp
  (use-package flymake)
#+end_src

#+RESULTS:

** Flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :custom
    (flyspell-issue-message-flag nil))
#+end_src

** DAP Mode

#+begin_src emacs-lisp

    (use-package dap-mode
      :after (lsp-mode)
      :functions dap-hydra/nil
      :config
      (require 'dap-java)
      :bind (:map lsp-mode-map
             ("<f5>" . dap-debug)
             ("M-<f5>" . dap-hydra))
      :hook ((dap-mode . dap-ui-mode)
        (dap-session-created . (lambda (&_rest) (dap-hydra)))
        (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

    (use-package dap-java
      :straight nil)
#+end_src

DAP netcoredbg

#+begin_src emacs-lisp
  ;; (defun dap-netcore--populate-attach-args (conf)
  ;;   "Populate CONF with the attach arguments."
  ;;   (dap--put-if-absent conf :process-id? (read-string "Process ID:"))
  ;;   (dap--put-if-absent conf :dap-server-path (list (dap-netcore--debugger-locate) "--interpreter=vscode" "--engineLogging=c:/log.dbg")))

  (defun dap-netcore--populate-attach-args (conf)
    "Populate CONF with the attach arguments."
    (dap--put-if-absent conf :processId (string-to-number (read-string "Enter PID: " "2345")))
    (dap--put-if-absent conf :dap-server-path (list (dap-netcore--debugger-locate) "--interpreter=vscode")))

  (dap-register-debug-provider
   "coreclr-launch"
   'dap-netcore--populate-attach-args)

  (dap-register-debug-template ".Net Core Launch (Console)"
                               (list :type "coreclr-launch"
                                     :request "attach"
                                     :name "NetCoreDbg::Attach"
                                     :stopAtEntry t))

  (defun dap-netcore--populate-launch-args (conf)
    "Populate CONF with the default arguments."
    (dap--put-if-absent conf :program (expand-file-name (read-file-name "Select an executable:" (concat (lsp-workspace-root) "/bin/Debug"))))
    (dap--put-if-absent conf :dap-server-path (list (dap-netcore--debugger-locate) "--interpreter=vscode")))



  (dap-register-debug-provider
   "coreclr-attach"
   'dap-netcore--populate-attach-args)

  (dap-register-debug-provider
   "coreclr-launch"
   'dap-netcore--populate-launch-args)

  (dap-register-debug-template ".Net Core Attach (Console)"
                               (list :type "coreclr-attach"
                                     :request "attach"
                                     :name "NetCoreDbg::Attach"
                                     :stopAtEntry t))

  (dap-register-debug-template ".Net Core Launch (Console)"
                               (list :type "coreclr-launch"
                                     :request "launch"
                                     :name "NetCoreDbg::Launch"
                                     :stopAtEntry t))
#+end_src

** Velocity Web Development (vtl)

Using apache velocity template langage for ESA
#+begin_src emacs-lisp :results raw
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.vtl" . web-mode))
    :custom ((web-mode-code-indent-offset 2)
             (web-mode-css-indent-offset 2)
             (web-mode-markup-indent-offset 2)
             (web-mode-sql-indent-offset 2)))
#+end_src

** Emacs Lisp
#+begin_src emacs-lisp
  (use-package emacs-lisp-mode
    :straight nil
    :ensure nil
    :bind (("C-c C-x b" . eval-buffer)))
#+end_src

** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook
    (typescript-mode . lsp-deferred)
    (typescript-mode . (lambda () (remhash 'angular-ls lsp-clients)))
    :custom ((typescript-indent-level 4)))
#+end_src
** Javascript

#+begin_src emacs-lisp
  (use-package js
    :straight nil
    :custom ((js-indent-level 4)))
#+end_src

** Python
#+begin_src emacs-lisp
  (use-package python
    :straight nil
    :custom ((python-indent 4)))
#+end_src

** Rust
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src

** Bazel Build

#+begin_src emacs-lisp
  (use-package bazel)
#+end_src

* TJA.el Add my Emacs lisp extensions
[[file:lisp/tja.org::*Org file for my private extensions to emacs packages][TJA.org file]]
#+begin_src emacs-lisp
(push "~/emacs/lisp/" load-path)
#+end_src

#+RESULTS:
| ~/emacs/lisp/ | /home/trevor/.emacs.d/straight/build/perspective | /home/trevor/.emacs.d/straight/build/tree-sitter-indent | /home/trevor/.emacs.d/straight/build/tree-sitter-langs | /home/trevor/.emacs.d/straight/build/tsc | /home/trevor/.emacs.d/straight/build/tree-sitter | /home/trevor/.emacs.d/straight/build/csharp-mode | /home/trevor/.emacs.d/straight/build/treemacs-projectile | /home/trevor/.emacs.d/straight/build/lsp-treemacs | /home/trevor/.emacs.d/straight/build/posframe | /home/trevor/.emacs.d/straight/build/cfrs | /home/trevor/.emacs.d/straight/build/hydra | /home/trevor/.emacs.d/straight/build/pfuture | /home/trevor/.emacs.d/straight/build/avy | /home/trevor/.emacs.d/straight/build/ace-window | /home/trevor/.emacs.d/straight/build/treemacs | /home/trevor/.emacs.d/straight/build/eldoc | /home/trevor/.emacs.d/straight/build/flymake | /home/trevor/.emacs.d/straight/build/lsp-ui | /home/trevor/.emacs.d/straight/build/lv | /home/trevor/.emacs.d/straight/build/spinner | /home/trevor/.emacs.d/straight/build/ht | /home/trevor/.emacs.d/straight/build/lsp-mode | /home/trevor/.emacs.d/straight/build/shrink-path | /home/trevor/.emacs.d/straight/build/all-the-icons | /home/trevor/.emacs.d/straight/build/doom-modeline | /home/trevor/.emacs.d/straight/build/vterm-toggle | /home/trevor/.emacs.d/straight/build/vterm | /home/trevor/.emacs.d/straight/build/yaml | /home/trevor/.emacs.d/straight/build/markdown-mode | /home/trevor/.emacs.d/straight/build/treepy | /home/trevor/.emacs.d/straight/build/let-alist | /home/trevor/.emacs.d/straight/build/ghub | /home/trevor/.emacs.d/straight/build/closql | /home/trevor/.emacs.d/straight/build/forge | /home/trevor/.emacs.d/straight/build/with-editor | /home/trevor/.emacs.d/straight/build/transient | /home/trevor/.emacs.d/straight/build/git-commit | /home/trevor/.emacs.d/straight/build/magit | /home/trevor/.emacs.d/straight/build/company | /home/trevor/.emacs.d/straight/build/consult-projectile | /home/trevor/.emacs.d/straight/build/projectile | /home/trevor/.emacs.d/straight/build/xref | /home/trevor/.emacs.d/straight/build/project | /home/trevor/.emacs.d/straight/build/which-key | /home/trevor/.emacs.d/straight/build/app-launcher | /home/trevor/.emacs.d/straight/build/embark-consult | /home/trevor/.emacs.d/straight/build/embark | /home/trevor/.emacs.d/straight/build/orderless | /home/trevor/.emacs.d/straight/build/consult | /home/trevor/.emacs.d/straight/build/marginalia | /home/trevor/.emacs.d/straight/build/vertico | /home/trevor/.emacs.d/straight/build/magit-section | /home/trevor/.emacs.d/straight/build/emacsql-sqlite | /home/trevor/.emacs.d/straight/build/emacsql | /home/trevor/.emacs.d/straight/build/s | /home/trevor/.emacs.d/straight/build/f | /home/trevor/.emacs.d/straight/build/dash | /home/trevor/.emacs.d/straight/build/org-roam | /home/trevor/.emacs.d/straight/build/org-contrib | /home/trevor/.emacs.d/straight/build/org-bullets | /home/trevor/.emacs.d/straight/build/org | /home/trevor/.emacs.d/straight/build/rainbow-delimiters | /home/trevor/.emacs.d/straight/build/key-chord | /home/trevor/.emacs.d/straight/build/spacemacs-theme | /home/trevor/.emacs.d/straight/build/bind-key | /home/trevor/.emacs.d/straight/build/use-package | /home/trevor/.emacs.d/straight/build/straight | /usr/share/emacs/28.0.60/site-lisp | /usr/share/emacs/site-lisp | /usr/share/emacs/28.0.60/lisp | /usr/share/emacs/28.0.60/lisp/vc | /usr/share/emacs/28.0.60/lisp/url | /usr/share/emacs/28.0.60/lisp/textmodes | /usr/share/emacs/28.0.60/lisp/progmodes | /usr/share/emacs/28.0.60/lisp/play | /usr/share/emacs/28.0.60/lisp/org | /usr/share/emacs/28.0.60/lisp/nxml | /usr/share/emacs/28.0.60/lisp/net | /usr/share/emacs/28.0.60/lisp/mh-e | /usr/share/emacs/28.0.60/lisp/mail | /usr/share/emacs/28.0.60/lisp/leim | /usr/share/emacs/28.0.60/lisp/language | /usr/share/emacs/28.0.60/lisp/international | /usr/share/emacs/28.0.60/lisp/image | /usr/share/emacs/28.0.60/lisp/gnus | /usr/share/emacs/28.0.60/lisp/eshell | /usr/share/emacs/28.0.60/lisp/erc | /usr/share/emacs/28.0.60/lisp/emulation | /usr/share/emacs/28.0.60/lisp/emacs-lisp | /usr/share/emacs/28.0.60/lisp/cedet | /usr/share/emacs/28.0.60/lisp/calendar | /usr/share/emacs/28.0.60/lisp/calc | /usr/share/emacs/28.0.60/lisp/obsolete |

#+begin_src emacs-lisp
  (org-babel-load-file "~/emacs/lisp/tja.org")

  (require 'tja-vterm)
  (require 'tja-magit)
  (require 'tja-misc)
  (require 'tja-org)
  (require 'tja-ocr)
#+end_src

* SQL

#+begin_src emacs-lisp

  ;;; Sql Server Setup
  (defcustom sql-ms-program "sqlcmd"
        "Command to start ;osql; (replaced for sqlcmd) by Microsoft.

      Starts `sql-interactive-mode' after doing some setup."
        :type 'file
        :group 'SQL)

  (defcustom sql-ms-options '("-w" "65535" "-y" "79" "-s" "|" "-k" "-C" "-I")
  ;; -W is the linesize, -y truncates values after 79 chars, -s is separator '|' and -k removes control characters from output
  "List of additional options for `sql-ms-program'."
  :type '(repeat string)
  :version "22.1"
  :group 'SQL)

  ;; Load connections if there are any
  (let ((filename "~/sql-connections.el"))
    (if (file-exists-p filename)
        (load-file filename)))
#+end_src

#+RESULTS:
: t

* Pass and org-password for password management

#+begin_src emacs-lisp
  (use-package pass)
#+end_src

** Using org-password for password generation
#+begin_src emacs-lisp
  (use-package org-passwords
    :defer t)

  (use-package org-contrib
    :straight nil
    :after org-mode)

  (defun tja-password-insert ()
    (interactive)
    (insert (org-passwords-generate-password-with-symbols "" 20)))

  (defun tja-password-insert-no-symbols ()
        (interactive)
        (insert (org-passwords-generate-password-without-symbols "" 20)))
#+end_src

* Multiple cursors

#+begin_src emacs-lisp
    (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

* Additional Org Packages

** Org contrib.  I forget why this was in here but I think it was important
#+begin_src emacs-lisp
  (use-package org-contrib)
#+end_src

** Org Roam
Configures org roam, dailies, tags, capture templates

#+begin_src emacs-lisp
  (use-package org-roam
    :defer 3
    :init
    (setq org-roam-directory "~/org-roam")
    (setq org-roam-v2-ack t)
    (if (boundp 'org-roam-directory)
      (unless (file-exists-p org-roam-directory)
          (make-directory org-roam-directory)))
    (require 'org-roam-dailies)
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("v" "video" plain
        "\n* Source\n\nLink: %^{Link}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ))
    :bind (("C-c t" . org-roam-tag-add)
           ("C-c n l" . org-roam-buffer-toggle)
           ("C-c n i" . org-roam-node-insert)
           ("C-c d" . org-roam-dailies-goto-today)
           ("C-c o" . org-roam-node-find)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (org-roam-setup)
    (org-roam-db-autosync-mode))

  (setq org-roam-dailies-directory "daily/")
#+end_src

#+RESULTS:
: daily/

** Add gutters to org mode

#+begin_src emacs-lisp

  ;; Seems to mess up org superstar
  (defun tja-org-mode-visual-fill ()
    (setq visual-fill-column-width 150
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column :defer t)


#+end_src

** Org Transclusion

#+begin_src emacs-lisp
  (use-package org-transclusion
    :bind (:map org-mode-map
           ("<f11>" . org-transclusion-add)
           ("C-c n t" . org-transclusion-mode)))
#+end_src

** Org anki

#+begin_src emacs-lisp
    (use-package org-anki)
#+end_src

* Vue JS

#+begin_src emacs-lisp
(use-package vue-mode)
#+end_src

* Simple http server

#+begin_src emacs-lisp
  (use-package simple-httpd)
#+end_src

* String Inflection
#+begin_src emacs-lisp
  (use-package string-inflection)
#+end_src

* --------- Experimental FOR NOW ---------

** MCT mode
#+begin_src emacs-lisp :tangle no
(straight-use-package '(mct :repo "protesilaos/mct"
			    :host gitlab))


(mct-mode 1)

(setq mct-remove-shadowed-file-names t) ; works when `file-name-shadow-mode' is enabled
(setq mct-hide-completion-mode-line t)
(setq mct-show-completion-line-numbers nil)
(setq mct-apply-completion-stripes t)
(setq mct-minimum-input 3)
(setq mct-live-update-delay 0.0)
#+end_src

#+RESULTS:
: 0.0

** Consult
Consult is a large package the looks like it replaces swiper

Here is a sample configuration I'm going through from the website
https://github.com/minad/consult

#+begin_src emacs-lisp :tangle no
  ;; Example configuration for Consult from minad/consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (("M-s l" . isearch-forward)
	   ("C-s" . consult-line)
	   ;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c b" . consult-bookmark)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ("<help> a" . consult-apropos)            ;; orig. apropos-command
	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings (search-map)
	   ("M-s f" . consult-find)
	   ("M-s F" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s m" . consult-multi-occur)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)
	   ("M-s t" . consult-theme))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Vertico, Selectrum, etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
	  (lambda ()
	    (when-let (project (project-current))
	      (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )
#+end_src

#+RESULTS:
: consult-theme

** Consult-dir

#+begin_src emacs-lisp :tangle no
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

#+RESULTS:
: consult-dir-jump-file

https://github.com/karthink/consult-dir

Swap vertico-map with  minibuffer-local-completion-map if not using vertico

* Adding org-babel-tangle as a safe form so I don't get bothered every time
#+begin_src emacs-lisp
(push '(add-hook 'after-save-hook 'org-babel-tangle nil t) safe-local-eval-forms)
#+end_src

** Then open this file on startup
#+begin_src emacs-lisp
  (find-file "~/emacs/dot-emacs.org")
#+end_src

* Local Variables - sets the after save hook to tangle this org file on save
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
