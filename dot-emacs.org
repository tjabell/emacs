;;-*- coding: utf-8; lexical-binding: t; -*-
#+title: Emacs: New Config in an Org file
#+STARTUP: overview
#+property: header-args:emacs-lisp  :tangle ~/.emacs.d/init.el :results none

* New Emacs configuration file

* Native compilation

#+begin_src emacs-lisp
  ;; Fix for undefined var error (hopefully temporary 2023-03-06)
  (defvar native-comp-deferred-compilation-deny-list nil)
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  (setq native-compile-prune-cache t)
#+end_src

* [Fix] For using multibyte characters

Ended up putting -*- coding: utf-8 -*- on top of the file
otherwide â¤µ would get converted to bytes when opening this file

* System config and some basic keys and programming packages

** Allow erase-buffer command
#+begin_src emacs-lisp :results raw
(put 'erase-buffer 'disabled nil)
#+end_src
** Auto mode alist config (dot files)

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\zshrc$" . sh-mode))
  (add-to-list 'auto-mode-alist '("\\.csproj$" . nxml-mode))
#+end_src

** [Optional] If debugging this may help

#+begin_src emacs-lisp :tangle no
  (toggle-debug-on-error t)
#+end_src

** Garbage collection, startup time
#+begin_src emacs-lisp :results raw
  ;;; Some base emacs gc config
  (setq gc-cons-threshold (* 100 1024 1024)
	read-process-output-max (* 1024 1024 3))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		       (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

** Base bootstrap config for straight.el and use-package replacement
#+begin_src emacs-lisp
  ;;; Bootstrap Straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;;;;  Effectively replace use-package with straight-use-package
  ;;; https://github.com/raxod502/straight.el/blob/develop/README.md#integration-with-use-package
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

  (setq use-package-verbose t)
#+end_src

#+RESULTS:
: t

** Custom on ws laptop, load exwm

#+begin_src emacs-lisp
  ;; (when (string-equal (system-name) "trevor-laptop2")
  ;;   (org-babel-load-file "~/emacs/exwm.org"))
#+end_src

** Theme | Disable Menu Bar | Inihibit Startup

#+begin_src emacs-lisp

(straight-use-package 'spacemacs-theme)

(if (fboundp 'tool-bar-mode)
    (progn
      (tool-bar-mode 0)
      (scroll-bar-mode 0))
  nil)

(menu-bar-mode 0)

(setq inhibit-startup-screen t)

#+end_src

#+RESULTS:
: t

** Font

#+begin_src emacs-lisp
  ;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil
                    :font "JetBrains Mono"
                    :weight 'light
                    :height 0.8)
                                       ; Set the variable pitch face
(set-face-attribute 'variable-pitch nil
                    ;;:font "Cantarell"
                    :font "DejaVu Sans"
                    ;;:font "Iosevka Aile"
                    :weight 'light
                    :height 1.0)
#+end_src

** Backup settings

Creates a .saves directory and puts backup files in there.

Shuts off backup creation for remote files
https://www.gnu.org/software/emacs/manual/html_node/tramp/Auto_002dsave-File-Lock-and-Backup.html
#+begin_src emacs-lisp
    ;; Backup settings
    (setq
     make-backup-files t
     backup-by-copying t
     backup-directory-alist '(("." . "~/.saves"))
     delete-old-versions t
     auto-save-mode nil
     auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

    ;;; Disable auto-save and auto-backup.
    ;;; Especially in development directories, we can't have emacs creating random #lockfiles# everywhere
    (setq create-lockfiles nil)
    (setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))
    ;;; End Disable auto-save and auto-backup

    ;;To turn off the backup feature for remote files and stop TRAMP from saving to the backup directory, use this:
    (add-to-list 'backup-directory-alist
		 (cons tramp-file-name-regexp nil))
#+end_src

#+RESULTS:
: ((^/\(\(?:\([[:alnum:]-]+\):\(?:\([^/|: 	]+\)@\)?\(\(?:[[:alnum:]_.%-]+\|\[\(?:\(?:[[:alnum:]]*:\)+[[:alnum:].]+\)?]\)\(?:#[[:digit:]]+\)?\)?|\)+\)?\([[:alnum:]-]+\):\(?:\([^/|: 	]+\)@\)?\(\(?:[[:alnum:]_.%-]+\|\[\(?:\(?:[[:alnum:]]*:\)+[[:alnum:].]+\)?]\)\(?:#[[:digit:]]+\)?\)?:\([^
: ]*\'\)) (.* . /tmp/))

** Visible Bell
#+begin_src emacs-lisp
  ;; Eliminate the 'flash/visible-bell' on ctl-g, other misc errors.  It's distracting, though maybe sometimes useful...
  (setq visible-bell nil
        ring-bell-function #'ignore)

#+end_src

** Other window as M-o is nice, and previous as M-O
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-O") (lambda () (interactive) (select-window (previous-window))))
#+end_src

#+RESULTS:
: other-window

** Key chord mode
#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (key-chord-mode 1)
    :config
    (progn (key-chord-define-global "qf" 'find-file)
           (key-chord-define-global "qk" 'kill-this-buffer)
           (key-chord-define-global "qr" 'next-buffer)
           ;(key-chord-define-global "qe" 'previous-buffer) ;;02-Aug-2024 - removed because it was interfering with some lisp programming
))
#+end_src

#+RESULTS:
: t

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

#+RESULTS:
| rainbow-delimiters-mode |

** Add lisp extension directory to load path
#+begin_src emacs-lisp
  (add-to-list 'load-path "/home/trevor/emacs/lisp/")
#+end_src

** Use spaces instead of tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Turn off symlink warning
Found in [[file:/usr/share/emacs/28.0.60/lisp/vc/vc-hooks.el::or (not (eq vc-follow-symlinks 'ask][vc-hooks.el]]

or group vc

#+begin_src emacs-lisp
  (custom-set-variables '(vc-follow-symlinks t))
#+end_src

** Enable narrow-to-region

#+begin_src emacs-lisp
  (enable-command #'narrow-to-region)
#+end_src

** Window Management

Transpose Frame, to rotate, flip, flop frames

https://www.emacswiki.org/emacs/TransposeFrame

#+begin_src emacs-lisp
  (use-package transpose-frame)
#+end_src

Storing an arrangement in a register:

Rotate windows from emacs wiki
https://www.emacswiki.org/emacs/TransposeWindows#:~:text=To%20swap%20the%20top%20and,window%2Dswap%2Dstates'%20.
#+begin_src emacs-lisp
  ;; https://www.emacswiki.org/emacs/TransposeWindows#:~:text=To%20swap%20the%20top%20and,window%2Dswap%2Dstates'%20.
  (defun rotate-windows (arg)
  "Rotate your windows; use the prefix argument to rotate the other direction"
  (interactive "P")
  (if (not (> (count-windows) 1))
      (message "You can't rotate a single window!")
    (let* ((rotate-times (prefix-numeric-value arg))
           (direction (if (or (< rotate-times 0) (equal arg '(4)))
                          'reverse 'identity)))
      (dotimes (_ (abs rotate-times))
        (dotimes (i (- (count-windows) 1))
          (let* ((w1 (elt (funcall direction (window-list)) i))
                 (w2 (elt (funcall direction (window-list)) (+ i 1)))
                 (b1 (window-buffer w1))
                 (b2 (window-buffer w2))
                 (s1 (window-start w1))
                 (s2 (window-start w2))
                 (p1 (window-point w1))
                 (p2 (window-point w2)))
            (set-window-buffer-start-and-point w1 b2 s2 p2)
            (set-window-buffer-start-and-point w2 b1 s1 p1)))))))
#+end_src

Swaps windows and lets you choose which to swap

#+begin_src emacs-lisp
  (setq swapping-buffer nil)
  (setq swapping-window nil)
  (defun swap-buffers-in-windows ()
      "Swap buffers between two windows"
      (interactive)
      (if (and swapping-window
               swapping-buffer)
          (let ((this-buffer (current-buffer))
                (this-window (selected-window)))
            (if (and (window-live-p swapping-window)
                     (buffer-live-p swapping-buffer))
                (progn (switch-to-buffer swapping-buffer)
                       (select-window swapping-window)
                       (switch-to-buffer this-buffer)
                       (select-window this-window)
                       (message "Swapped buffers."))
              (message "Old buffer/window killed.  Aborting."))
            (setq swapping-buffer nil)
            (setq swapping-window nil))
        (progn
          (setq swapping-buffer (current-buffer))
          (setq swapping-window (selected-window))
          (message "Buffer and window marked for swapping."))))
#+end_src

*** Custom shortcuts with C-c C-s (screen)

Couldn't find a good shortcut 16-Jun-2023
#+begin_src emacs-lisp :results raw
  ;(global-set-key (kbd "C-c C-s l") #'split-window-right)
  ;(global-set-key (kbd "C-c C-s j") #'split-window-below)
#+end_src

** Long lined files
#+begin_src emacs-lisp
(if (version<= "27.1" emacs-version)
    (global-so-long-mode 1))
#+end_src

** Pixel scroll precision
#+begin_src emacs-lisp :results raw
  (pixel-scroll-precision-mode)
#+end_src

** Alter zap-to-char/zap-up-to-char
Zap up to char is usually what I want, so use M-z for that,
Credit: https://irreal.org/blog/?p=1536
Also Steve Purcell's .emacs.d
#+begin_src emacs-lisp :results raw
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)
(global-set-key (kbd "M-Z") 'zap-to-char)
#+end_src
** Remove unsuspend functionality (Ctl-z)

#+begin_src emacs-lisp :results raw
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x z"))
#+end_src

* Tempel Snippets

Templates are in ~/.emacs.d/templates

#+begin_src emacs-lisp
;; Configure Tempel
(use-package tempel
  ;; Require trigger prefix before template name when completing.
  ;; :custom
  ;; (tempel-trigger-prefix "<")

  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))

  :init

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
)

;; Optional: Add tempel-collection.
;; The package is young and doesn't have comprehensive coverage.
(use-package tempel-collection)
#+end_src

* Org mode, org-tempo, org bullets, org-roam, org-ai

** Main org config
Org ellipsis has been bugging out tangle a little bit.
   The arrow is 2935: RET ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS"
   to input: type "C-x 8 RET 2935" or "C-x 8 RET ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS"

   fixed by putting a -*- coding: utf-8 -*- at the top of this file


#+begin_src emacs-lisp
    (use-package org
      ;; Going back to non-built in because it starts to throw an error in later emacs version
      ;:straight (:type built-in)
      :init (progn
              (setq org-ellipsis " â¤µ")
              (setq org-todo-keywords
                    '((sequence "TODO" "IN-PROGRESS" "TEST" "DONE")))
              (setq org-capture-templates
                    '(("t" "Todo" entry
                       (file+headline "~/projects/me/todo_me.org" "Inbox")
                       "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
                      ("g" "Goddard Todo" entry
                       (file+headline "~/projects/goddard/todo_goddard.org" "Inbox")
                       "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
                      ("e" "ESA Todo" entry
                       (file+headline "~/projects/extended_stay/todo_esa.org" "Inbox")
                       "* TODO %?\n %i\n %a\n %i" :empty-lines 1)
                      ("a" "ACDHH CDBMS Todo" entry
                       (file+headline "~/projects/acdhh/todo_acdhh-cdbms.org" "Inbox")
                       "* TODO %?\n %i\n %a\n %i" :empty-lines 1)))
              (setq org-refile-targets
                    '((nil :maxlevel . 9)
                      (org-agenda-files . (:maxlevel . 6))
                      (org-buffer-list :maxlevel . 2)))
              (setq org-agenda-file-regexp "\\`[^.].*\\.org'\\|[0-9]+")
              (setq org-hide-emphasis-markers t)
              (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
              (setq org-cycle-separator-lines -1)
              (setq org-use-speed-commands t))
      :bind (("C-c c" . org-capture)
             ("C-c C-x C-j" . org-clock-goto)
             ( "C-c l" . org-store-link)
             ( "C-c c" . org-capture)
             ( "C-c a" . org-agenda)
             ( "C-c b" . org-iswitchb)
             :map org-mode-map
             ("C-c C-x C-u" . org-clock-update-time-maybe)
             ("C-c C-x m" . org-meta-return)
             ("C-c C-x r" . org-metaright)
             ("C-c C-x l" . org-metaleft)
             ("C-M-i" . completion-at-point))
      :config
      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp :results raw"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("li" . "src lisp :results raw"))
      (add-to-list 'org-structure-template-alist '("ai" . "ai
  [SYS]: You are a helpful assistant inside emacs, so please keep answers concise and give the code only, no explanation
  [ME]:"))
  (add-to-list 'org-structure-template-alist '("aii" . "ai :image :size \"256x256\""))
      :custom
      (org-confirm-babel-evaluate nil)
      (org-roam-completion-everywhere t)
      (org-babel-default-header-args:C
       (cons '(:tangle . "yes")
             (assq-delete-all :tangle org-babel-default-header-args)))
      (org-agenda-files '("~/projects/me/todo_me.org"
                          "~/projects/equinox/todo_equinox.org"
                          "~/projects/goddard/todo_goddard.org"
                          "~/projects/extended_stay/todo_esa.org"
                          "~/projects/acdhh/todo_acdhh-cdbms.org"
                          "~/projects/acdhh/todo_acdhh-www.org"
                          "~/projects/mtsinai/todo_mtsinai.org"
                          "~/projects/srpmic/todo_srpmic.org"
                          "~/org-roam/20220103111344-birthdays.org"))
      (org-columns-default-format "%25ITEM %TODO %3PRIORITY %TAGS")
      (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4))
      (org-agenda-start-with-clockreport-mode nil)
      (org-clock-in-resume t)
      (org-clock-in-switch-to-state "IN-PROGRESS")
      (org-clock-persist t)
      (org-clock-history-length 15))

    (use-package org-superstar
      :after org
      :hook ((org-mode . org-superstar-mode)
             (org-mode . (lambda () (variable-pitch-mode 1))))
      :custom
      (org-superstar-remove-leading-stars t)
      (org-superstar-headline-bullets-list '("â" "â" "â" "â" "â" "â" "â")))

    (setq-default line-spacing 2)

    ;; Async shell execution
    (use-package ob-async)

    ;; Supposedly not needed after org 9.2 (on 9.6-dev as of this comment)
    (when (version<= "9.2" (org-version))
      (require 'org-tempo))


    ;; Configuring font
    (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

    (custom-theme-set-faces
     'user
     '(org-block ((t (:inherit fixed-pitch))))
     '(org-code ((t (:inherit (shadow fixed-pitch)))))
     '(org-document-info ((t (:foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
     '(org-link ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-table ((t (:inherit fixed-pitch))) t)
     '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold))))
     '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+end_src

#+RESULTS:
: org-tempo

** Get ob-rust for org babel rust
#+begin_src emacs-lisp
  (use-package ob-rust)
#+end_src

** Org babel graph ql (ob-graphql)
https://github.com/jdormit/ob-graphql

#+begin_src emacs-lisp
(use-package ob-graphql)
#+end_src

** Configure org babel languages
#+begin_src emacs-lisp
  (require 'ob-js)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (graphql . t)
     (ruby . t)
     (emacs-lisp . t)
     (python . t)
     (perl . t)
     (haskell . t)
     (C . t)
     (shell . t)
     (rust . t)
     (js . t)))

  (push '("conf" . conf-unix) org-src-lang-modes)

  (add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
#+end_src

#+RESULTS:
: ((conf-unix . conf-unix) (redis . redis) (php . php) (arduino . arduino) (conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))

** Org AI
#+begin_src emacs-lisp :results raw
(use-package org-ai
  :ensure t
  :commands (org-ai-mode
             org-ai-global-mode)
  :init
  (add-hook 'org-mode-hook #'org-ai-mode) ; enable org-ai in org-mode
  (org-ai-global-mode) ; installs global keybindings on C-c M-a
  :config
  (setq org-ai-default-chat-model "gpt-3.5-turbo")) ; if you are on the gpt-4 beta:
#+end_src

#+begin_src emacs-lisp :results raw
  (load "~/.chat-gpt-secrets.el")
#+end_src

* PHP

#+begin_src emacs-lisp
  (use-package php-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.ctp" . php-mode)))
#+end_src

* Completing Read Configuration: Vertico|Savehist|Marginalia|Consult|Orderless|Embark|Etc...

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :config
    ;; Cycles through the buffer list whne you hit the bottom
    (setq vertico-cycle t)
    :bind (:map minibuffer-local-map
                ;; Matching old ivy behavior
                ("C-l" . backward-kill-word)
                ;; Binding to allow inserting the current selection
                ("C-j" . vertico-insert))
    :init
    (vertico-mode))

  (setq enable-recursive-minibuffers t)
#+end_src

#+RESULTS:
: vertico-insert

Other packages to look into
  Consult: Collection of commands that provide additional completions
  Savehist: saves recent files at the top of the list
  Embark: Can use Embark for actions in Vertico
  Orderless: Searching across completions
  Selectrum: Alternative to Vertico, less minimal but similar principles

** Savehist
   Built into emacs already
   https://www.emacswiki.org/emacs/SaveHist

   Can fine tune with savehist-save-minibuffer-history

   Saves history of recently opened buffers, commands, etc...
#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

#+RESULTS:

** Marginalia
   "Marginalia are marks made in the margins of a book or other document. They may be scribbles, comments, glosses, critiques, doodles, or illuminations."
   [[https://en.wikipedia.org/wiki/Marginalia][Wikipedia]]
*** What it does
Improves margin information around completions

uses annotators

*** Config
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :ensure t
    ;; Marginalia-cycle will switch through different annotators on each file
    :bind (("M-A" . marginalia-cycle)
	 :map minibuffer-local-map
	 ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

#+RESULTS:
: marginalia-cycle

*** Basic face annotator
#+begin_src emacs-lisp
  ;; Create annotator
  (defun my-face-annotator (cand)
    (when-let (sym (intern-soft cand))
      (concat (propertize " " 'display '(space :align-to center))
	      (propertize "The quick brown fox jumps over the lazy dog" 'face sym))))

  ;; Wire it up in the registry
  (add-to-list 'marginalia-annotator-registry
	       '(face my-face-annotator marginalia-annotate-face builtin none))
#+end_src

#+RESULTS:
| face                 | my-face-annotator                        | marginalia-annotate-face    | builtin | none |
| command              | marginalia-annotate-command              | marginalia-annotate-binding | builtin | none |
| embark-keybinding    | marginalia-annotate-embark-keybinding    | builtin                     | none    |      |
| customize-group      | marginalia-annotate-customize-group      | builtin                     | none    |      |
| variable             | marginalia-annotate-variable             | builtin                     | none    |      |
| function             | marginalia-annotate-function             | builtin                     | none    |      |
| face                 | marginalia-annotate-face                 | builtin                     | none    |      |
| color                | marginalia-annotate-color                | builtin                     | none    |      |
| unicode-name         | marginalia-annotate-char                 | builtin                     | none    |      |
| minor-mode           | marginalia-annotate-minor-mode           | builtin                     | none    |      |
| symbol               | marginalia-annotate-symbol               | builtin                     | none    |      |
| environment-variable | marginalia-annotate-environment-variable | builtin                     | none    |      |
| input-method         | marginalia-annotate-input-method         | builtin                     | none    |      |
| coding-system        | marginalia-annotate-coding-system        | builtin                     | none    |      |
| charset              | marginalia-annotate-charset              | builtin                     | none    |      |
| package              | marginalia-annotate-package              | builtin                     | none    |      |
| imenu                | marginalia-annotate-imenu                | builtin                     | none    |      |
| bookmark             | marginalia-annotate-bookmark             | builtin                     | none    |      |
| file                 | marginalia-annotate-file                 | builtin                     | none    |      |
| project-file         | marginalia-annotate-project-file         | builtin                     | none    |      |
| buffer               | marginalia-annotate-buffer               | builtin                     | none    |      |
| consult-multi        | marginalia-annotate-consult-multi        | builtin                     | none    |      |

Disabling Annotators
https://github.com/minad/marginalia#disabling-annotators-builtin-or-lightweight-annotators

** Consult

My configuration for consult:

Using configuration under the vertico section.  Might revisit this...
#+begin_src emacs-lisp
  (use-package consult
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ("C-c b" . consult-bookmark)
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ;; ("C-s" . consult-line)                   ;; needed by consult-line to detect isearch
           ("M-s l" . consult-line)                   ;; needed by consult-line to detect isearch
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s L" . consult-line-multi)
           ("M-s t" . consult-theme)
           ("C-s" . isearch-forward))     ;; Resetting C-s to default isearch
    :config
    ;; Configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    (autoload 'projectile-project-root "projectile")
    (setq consult-project-root-function #'projectile-project-root)
    ;; Configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<")
    )
#+end_src

#+RESULTS:
: consult-theme

** Orderless

Completion style package.  Uses space separated components to match candidates.
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(orderless-dispatch)
    ;;        orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(flex orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion))
                                     (buffer (styles substring flex)))))


  (use-package emacs
    :custom
    (read-buffer-completion-ignore-case t))

  (defun flex-if-twiddle (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun first-initialism (pattern index _total)
    (if (= index 0) 'orderless-initialism))

  (defun without-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))

  (setq orderless-matching-styles '(orderless-regexp)
        orderless-style-dispatchers '(flex-if-twiddle
        			      without-if-bang))

  (defun my/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
        	orderless-style-dispatchers nil))

  (define-key vertico-map (kbd "M-l")
    #'my/match-components-literally)
#+end_src

#+RESULTS:
: my/match-components-literally

*** Orderless scratch:

Minibuffer completion map toggle C-l to get orderless literal style
#+begin_src emacs-lisp :tangle no
  (setq orderless-matching-styles '(orderless-regexp)
	orderless-style-dispatchers '(flex-if-twiddle
				      without-if-bang))

  (defun m/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
		orderless-style-dispatchers nil))

  (define-key minibuffer-local-completion-map (kbd "M-l")
    #'m/match-components-literally)

  (define-key vertico-map (kbd "M-l")
    #'m/match-components-literally)
#+end_src

#+RESULTS:
: my/match-components-literally

** Embark and embark-consult
Everything goes through `embark-act`

Learning embark

#+begin_src emacs-lisp
  (defun my:export-region-to-scratch-buffer (start end)
    "Export the selected region to a temporary scratch buffer in fundamental mode."
    (interactive "r")
    (let ((region-content (buffer-substring-no-properties start end))
          (scratch-buffer (generate-new-buffer "*Temporary Scratch*")))
      (with-current-buffer scratch-buffer
        (fundamental-mode)
        (insert region-content)
        (switch-to-buffer-other-window scratch-buffer))))

  ;; Credit: https://karthinks.com/software/fifteen-ways-to-use-embark/#open-any-buffer-by-splitting-any-window
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
             ;;; Right now this is jump to definition.  I need to find a good key for this
             ;;;("C-;" . embark-dwim)        ;; good alternative: M-.
             ;;; Right now this is jump to definition.  I need to find a good key for this
             ;;;("M-." . embark-dwim)        ;;
             ;;;("C-h B" . embark-bindings) ;; alternative for `describe-bindings'
     )
    ;;:init

    ;; Optionally replace the key help with a completing-read interface
    ;;(setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none))))

    ;; Is this the right place for this?  It works but when is config running and should this be run at 'compile time' here?
    (eval-when-compile
      (defmacro my/embark-split-action (fn split-type)
        `(defun ,(intern (concat "my/embark-"
                                 (symbol-name fn)
                                 "-"
                                 (car (last  (split-string
                                              (symbol-name split-type) "-"))))) ()
           (interactive)
           (funcall #',split-type)
           (call-interactively #',fn))))

    (define-key embark-file-map     (kbd "2") (my/embark-split-action find-file split-window-below))
    (define-key embark-buffer-map   (kbd "2") (my/embark-split-action switch-to-buffer split-window-below))
    (define-key embark-bookmark-map (kbd "2") (my/embark-split-action bookmark-jump split-window-below))

    (define-key embark-file-map     (kbd "3") (my/embark-split-action find-file split-window-right))
    (define-key embark-buffer-map   (kbd "3") (my/embark-split-action switch-to-buffer split-window-right))
    (define-key embark-bookmark-map (kbd "3") (my/embark-split-action bookmark-jump split-window-right))

    (define-key embark-region-map (kbd "T") 'my:export-region-to-scratch-buffer))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult))
#+end_src

#+RESULTS:

*** Interesting functions
embark-collect-snapshot: like occur kind of
embark-export: tries to open a buffer in an appropriate major mode
embark-become: switches the command but keeps input

** App launcher
   #+begin_src emacs-lisp
     (use-package app-launcher
       :straight '(app-launcher :host github :repo "SebastienWae/app-launcher")
       :bind ("C-c C-SPC" . app-launcher-run-app))
   #+end_src

   #+RESULTS:
   : app-launcher-run-app

** Consult-lsp

** Consult-dir
TBD

** Avy
#+begin_src emacs-lisp :results raw
  (use-package avy
       :bind (("M-s a" . avy-goto-word-or-subword-1)))
#+end_src

* Compilation and parrot mode
#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (read-only-mode)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (read-only-mode))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)


#+end_src

#+begin_src emacs-lisp :results raw
(defun my/parrot-animate-when-compile-success (buffer result)
  (if (string-match "^finished" result)
      (parrot-start-animation)))

(use-package parrot
  :ensure t
  :config
  (parrot-mode)
  (add-to-list 'compilation-finish-functions 'my/parrot-animate-when-compile-success))
#+end_src

* Which Key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)
    (which-key-setup-side-window-right))
#+end_src

#+RESULTS:
: t

* Projects: Projectile | Consult-projectile
   #+begin_src emacs-lisp
     ;; 17-Apr-2024 this was breaking eglot
     ;; (require-with-check 'project) was throwing
     ;; 18-Apr-2024 Update: I think maybe it was trying to use project.el from the recipe
     ;;   recipe looks like (project :type git :host github :repo "emacs-straight/project" :files ("*" (:exclude ".git")))
     ;;   so seems plausible, adding :straight nil
     (use-package project
       :straight nil
       :custom
       (project-vc-merge-submodules . nil))

     (use-package projectile
       :bind-keymap ("C-c p" . projectile-command-map))

     (use-package consult-projectile
       :straight (consult-projectile :type git :host gitlab :repo "OlMon/consult-projectile" :branch "master"))

     ;; ;; we need this wrapper to match Projectile's API
     ;; (defun projectile-project-current (dir)
     ;;   "Retrieve the root directory of the project at DIR using `project-current'."
     ;;   (cdr (project-current nil dir)))

     ;; (setq projectile-project-root-functions '(projectile-project-current))

     (projectile-mode)
   #+end_src

   #+RESULTS:
   | projectile-project-current |

** Perspective
Doesnt activate on startup.  Maybe need to move it down.  What is bound to C-x x s on startup?
#+begin_src emacs-lisp
  ;; (use-package perspective
  ;;   :bind (("C-x k" . persp-kill-buffer*))
  ;;   :config (persp-mode))
#+end_src

#+RESULTS:
: persp-kill-buffer*

* Company (deprecated for Corfu)
#+begin_src emacs-lisp
  ;; (use-package company
  ;;   :hook ((prog-mode . company-mode))
  ;;   :config (progn
  ;;             (setq company-idle-delay 0.0
  ;;                   company-minimum-prefix-length 3)))
#+end_src

#+RESULTS:

* Corfu (Experimental Company Alternative)

Default Configuration from website
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      ;; (corfu-separator ?\s)          ;; Orderless field separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin

      ;; Enable Corfu only for certain modes.
      ;; :hook ((prog-mode . corfu-mode)
      ;;        (shell-mode . corfu-mode)
      ;;        (eshell-mode . corfu-mode))

      ;; Configure corfu-popup
      (corfu-popupinfo-delay '(1.0 . 1.0))

      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.

      :init
      (global-corfu-mode)
      (corfu-popupinfo-mode))


    (defun my:setup-corfu-prog-mode ()
        (setq-local corfu-auto-delay  0
                    corfu-auto-prefix 1))

    (defun my:setup-corfu-writing-mode ()
      (setq-local corfu-auto-delay  1
                  corfu-auto-prefix 3))

    (add-hook 'prog-mode-hook
              #'my:setup-corfu-prog-mode)

    (add-hook 'sql-interactive-mode-hook
              #'my:setup-corfu-writing-mode)

    (add-hook 'org-mode-hook
              #'my:setup-corfu-writing-mode)

    ;; A few more useful configurations...
    (use-package emacs
      :init
      ;; TAB cycle if there are only few candidates
      ;; (setq completion-cycle-threshold 3)

      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (setq tab-always-indent 'complete)

      ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
      ;; try `cape-dict'.
      (setq text-mode-ispell-word-completion nil)

      ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
      ;; mode.  Corfu commands are hidden, since they a
      ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
      ;; setting is useful beyond Corfu.
      (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

* Cape (Additional Completion Backends)
#+begin_src emacs-lisp :results raw
;; Add extensions
(use-package cape
  ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
  ;; Press C-c p ? to for help.
  ;:bind ("C-c p" . cape-prefix-map) ;; Alternative keys: M-p, M-+, ...
  ;; Alternatively bind Cape commands individually.
  ;; :bind (("C-c p d" . cape-dabbrev)
  ;;        ("C-c p h" . cape-history)
  ;;        ("C-c p f" . cape-file)
  ;;        ...)
  :init
  ;; Add to the global default value of `completion-at-point-functions' which is
  ;; used by `completion-at-point'.  The order of the functions matters, the
  ;; first function returning a result wins.  Note that the list of buffer-local
  ;; completion functions takes precedence over the global list.
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block)
  ;; (add-hook 'completion-at-point-functions #'cape-history)
  ;; ...
)
#+end_src

* Kind icons (for corfu)
#+begin_src emacs-lisp :results raw
  (use-package kind-icon
    :ensure t
    :after corfu
    ;:custom
    ; (kind-icon-blend-background t)
    ; (kind-icon-default-face 'corfu-default) ; only needed with blend-background
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; (use-package kind-icon
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'my-completion-ui-mode-hook
  ;;    	    (lambda ()
  ;;    	      (setq completion-in-region-function
  ;;    		    (kind-icon-enhance-completion
  ;;    		     completion-in-region-function)))))
#+end_src

* All the Icons

Will it interfere with kind-icons?

#+begin_src emacs-lisp :results raw
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook ((dired-mode . all-the-icons-dired-mode)))
#+end_src

* Magit
#+begin_src emacs-lisp
  ;; Adding the options for no-merges and first-parent for following branch lines
  (use-package magit
    :straight (:host github :repo "magit/magit" :branch "main")
    :config
    (require 'magit-extras)
    (transient-append-suffix 'magit-log "-n"
      '("-m" "No Merges" "--no-merges"))
    (transient-append-suffix 'magit-log "-n"
      '("-x" "First Parent" "--first-parent"))
    :bind
    ("<f10>" . magit-status)
    ("C-x g" . magit-status))
#+end_src

#+RESULTS:
: magit-status

** Forge

#+begin_src emacs-lisp
  ;; Breaking 17-Apr-2024 - error with arguments
  ;; (use-package forge
  ;;   :after magit
  ;;   :config (setcar forge-alist
  ;;                   '("github.com"
  ;;                     "api.github.com"
  ;;                     "github.com"
  ;;                     forge-github-repository)))
#+end_src

#+RESULTS:

* Vterm | vterm-toggle
#+begin_src emacs-lisp
  (use-package vterm
    :init (setq vterm-max-scrollback 16000))
  (use-package vterm-toggle
    :bind
    ("<f12>" . vterm-toggle)
    ("C-<f12>" . vterm-toggle-cd))
#+end_src

#+RESULTS:
: vterm-toggle-cd

* EShell
#+begin_src emacs-lisp
  (require 'em-term)
  (add-to-list 'eshell-visual-options '("git" "--help" "--paginate"))
  (add-to-list 'eshell-visual-subcommands '("git" "log" "diff" "show"))
  (add-to-list 'eshell-visual-subcommands '("ng" "test" "serve"))
#+end_src

* Modeline (Doom)
#+begin_src emacs-lisp
  (use-package doom-themes)

  (use-package doom-modeline
    :init (doom-modeline-mode 1))


(load-theme 'doom-dark+ t)

#+end_src

#+RESULTS:

* IDE/Development

** Editorconfig
#+begin_src emacs-lisp
  (use-package editorconfig)
#+end_src

** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.json" . json-mode)))
#+end_src

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Tree sitter (experimental)
Builtin after emacs 29
#+begin_src emacs-lisp :results raw
  (use-package treesit
    :straight nil
    :config
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (c-sharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))))

  (use-package treesit-auto
    :straight '(treesit-auto :host github :repo "renzmann/treesit-auto")
    :config
    (customize-set-value 'treesit-font-lock-level 4)
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))


  ;; Remove annoying new fwd sexp behavior
  (defun mp-remove-treesit-sexp-changes ()
    (when (eq forward-sexp-function #'treesit-forward-sexp)
      (setq forward-sexp-function nil))
    (when (eq transpose-sexps-function #'treesit-transpose-sexps)
      (setq transpose-sexps-function #'transpose-sexps-default-function))
    (when (eq forward-sentence-function #'treesit-forward-sentence)
      (setq forward-sentence-function #'forward-sentence-default-function)))

  (add-hook 'prog-mode-hook #'mp-remove-treesit-sexp-changes)
#+end_src

** LSP/Eglot
#+begin_src emacs-lisp
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(vue-mode . ("vls" "--stdio"))))
  ;;(setq my:csharp-lsp-server "/usr/bin/omnisharp")

     ;;; LSP
  ;; (use-package lsp-mode
  ;;   :hook (
  ;;          (csharp-tree-sitter-mode . lsp-deferred)
  ;;          (java-mode . lsp-deferred)
  ;;          )
  ;;   :init
  ;;   (setq lsp-keymap-prefix "C-c l")
  ;;   :commands lsp lsp-deferred
  ;;   :custom (lsp-csharp-server-path my:csharp-lsp-server))

  ;; (use-package lsp-ui
  ;;   :after (lsp-mode)
  ;;   :hook (lsp-mode . lsp-ui-mode)
  ;;   :custom
  ;;   (lsp-ui-doc-position 'bottom))

  ;; (use-package eglot
  ;;   :straight nil
  ;;   :config
  ;;   (add-to-list 'eglot-server-programs
  ;;                `(csharp-tree-sitter-mode . ("/usr/bin/omnisharp" "-lsp")))

  ;;   (defclass eglot-sqls (eglot-lsp-server) () :documentation "SQL's Language Server")

  ;;   (add-to-list 'eglot-server-programs '(sql-mode . (eglot-sqls "/home/trevor/go/sqls/sqls" "--config" "~/.config/sqls/config.yml")))


  ;;   (cl-defmethod eglot-execute-command
  ;;     ((server eglot-sqls) (_cmd (eql switchDatabase)) arguments)
  ;;     "For switchDatabase."
  ;;     (let* ((res (jsonrpc-request server :workspace/executeCommand
  ;;                                  `(:command "showDatabases" :arguments ,arguments :timeout 0.5)))
  ;;            (menu-items (split-string res "\n"))
  ;;            (menu `("Eglot code actions:" ("dummy" ,@menu-items)))
  ;;            (db (if (listp last-nonmenu-event)
  ;;                    (x-popup-menu last-nonmenu-event menu)
  ;;                  (completing-read "[eglot] Pick a database: "
  ;;                                   menu-items nil t
  ;;                                   nil nil (car menu-items))
  ;;                  ))
  ;;            )
  ;;       (jsonrpc-request server :workspace/executeCommand
  ;;                        `(:command "switchDatabase" :arguments [,db] :timeout 0.5))
  ;;       ))
  ;;   (cl-defmethod eglot-execute-command
  ;;     ((server eglot-sqls) (command (eql executeQuery)) arguments)
  ;;     "For executeQuery."
  ;;     ;; (ignore-errors
  ;;     (let* ((beg (eglot--pos-to-lsp-position (if (use-region-p) (region-beginning) (point-min))))
  ;;            (end (eglot--pos-to-lsp-position (if (use-region-p) (region-end) (point-max))))
  ;;            (res (jsonrpc-request server :workspace/executeCommand
  ;;                                  `(:command ,(format "%s" command) :arguments ,arguments
  ;;                                             :timeout 0.5 :range (:start ,beg :end ,end))))
  ;;            (buffer (generate-new-buffer "*sqls*")))
  ;;       (with-current-buffer buffer
  ;;         (eglot--apply-text-edits `[
  ;;                                    (:range
  ;;                                     (:start
  ;;                                      (:line 0 :character 0)
  ;;                                      :end
  ;;                                      (:line 0 :character 0))
  ;;                                     :newText ,res)
  ;;                                    ]
  ;;                                  )
  ;;         (org-mode))
  ;;       (pop-to-buffer buffer))
  ;;     )
  ;;   (cl-defmethod eglot-execute-command
  ;;     ((server eglot-sqls) (_cmd (eql switchDatabase)) arguments)
  ;;     "For switchDatabase."
  ;;     (let* ((res (jsonrpc-request server :workspace/executeCommand
  ;;                                  `(:command "showDatabases" :arguments ,arguments :timeout 0.5)))
  ;;            (menu-items (split-string res "\n"))
  ;;            (menu `("Eglot code actions:" ("dummy" ,@menu-items)))
  ;;            (db (if (listp last-nonmenu-event)
  ;;                    (x-popup-menu last-nonmenu-event menu)
  ;;                  (completing-read "[eglot] Pick an database: "
  ;;                                   menu-items nil t
  ;;                                   nil nil (car menu-items))
  ;;                  ))
  ;;            )
  ;;       (jsonrpc-request server :workspace/executeCommand
  ;;                        `(:command "switchDatabase" :arguments [,db] :timeout 0.5))
  ;;       ))
  ;;   :custom
  ;;   (eglot-confirm-server-initiated-edits nil))

  ;; (add-to-list 'eglot-server-programs
  ;;              `(csharp-tree-sitter-mode . ("/usr/bin/omnisharp" "-lsp")))

  ;; (setcdr
  ;;  (assoc '(js-mode typescript-mode) eglot-server-programs)
  ;;  '("typescript-language-server"
  ;;    "--stdio"
  ;;    "--tsserver-path"
  ;;    "/usr/lib/node_modules/typescript/lib/"
  ;;                                         ;"~/.nvm/versions/node/v16.16.0/lib/node_modules/typescript/lib/"
  ;;    ))

  (use-package treemacs
    :bind (("<f8>" . treemacs)
           :map treemacs-mode-map
           ;; Bind single left click to open directory/file
           ;; https://github.com/jwiegley/use-package#binding-within-local-keymaps
           ;; https://github.com/Alexander-Miller/treemacs/issues/228
           ([mouse-1] . #'treemacs-single-click-expand-action)))

  ;; (use-package lsp-treemacs
  ;;   :after lsp)

  (use-package treemacs-projectile)

#+end_src

#+RESULTS:


** GCMH
#+begin_src emacs-lisp :results raw
  ;install gcmh package to increase the gc value when necessary and decrease it. nice package btw
  (use-package gcmh)
#+end_src
** Speeding up Eglot
#+begin_src emacs-lisp :results raw
  ;;Copied from:
  ;;https://www.reddit.com/r/emacs/comments/16vixg6/how_to_make_lsp_and_eglot_way_faster_like_neovim/
  (fset #'jsonrpc--log-event #'ignore) ;remove laggy typing it probably reduces chatty json from lsp to eglot i guess

  (setq eglot-events-buffer-size 0) ;disabling event logging in eglot

  (setq eglot-sync-connect nil) ;disabling elgot freeze the UI for up to 3s when you open file maybe large one

  ;(add-hook 'focus-out-hook 'garbage-collect) optional, if you don't want to use gcmh package

  (setq eglot-connect-timeout nil) ;optional "my code actually"

  ;set this values on company package or

  (setq company-idle-delay 0) ;how long to wait for company mode to wait after it got completion obviously you don't want to wait so just set it to 0

  (setq company-minimum-prefix-length 1) ;how many characters you want to type before popping up the completion UI obviously 1 right

#+end_src

** CSharp/Omnisharp with tree-sitter mode and dotnet

*** Csharp/omnisharp/dotnet

#+begin_src emacs-lisp
  ;; (use-package csharp-mode
  ;;   :config
  ;;   (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
#+end_src

#+RESULTS:
| lsp-deferred |

So this essentially uses async-shell-command and finds the local test or nearest project to run.

The output isn't as rich as even vterm so I'm commenting this out again for now 24-Oct-2023

(setq *cmd* "dotnet test /home/trevor/projects/goddard/src/ipaas-leads-api/Goddard.LeadsApi.IntegrationTests/Goddard.LeadsApi.IntegrationTests.csproj --filter \"InsertLead\"")
(async-shell-command *cmd* "*dotnet*")

#+begin_src emacs-lisp
  (use-package dotnet)
#+end_src

Trying Sharper
#+begin_src emacs-lisp
  (use-package sharper
    :bind
    ("C-c n s" . sharper-main-transient))
#+end_src

** Java

*** LSP Java

#+begin_src emacs-lisp
  ;; (use-package lsp-java
  ;;   :hook (java-mode . lsp-deferred))
#+end_src

** Flymake

#+begin_src emacs-lisp
  ;; 17-Apr-2024 commenting out because it's breaking eglot for soem reason
  ;(use-package flymake)
#+end_src

#+RESULTS:

** Flyspell

#+begin_src emacs-lisp
  (use-package flyspell
    :custom
    (flyspell-issue-message-flag nil))
#+end_src

** DAP Mode

#+begin_src emacs-lisp
  ;; (use-package dap-java
  ;;   :straight nil)

  (use-package dap-mode
    :after (lsp-mode)
    :functions dap-hydra/nil
    ;; :config
    ;; (require 'dap-java)
    :bind (:map lsp-mode-map
           ("<f5>" . dap-debug)
           ("M-<f5>" . dap-hydra))
    :hook ((dap-mode . dap-ui-mode)
      (dap-session-created . (lambda (&_rest) (dap-hydra)))
      (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

#+end_src

DAP netcoredbg

#+begin_src emacs-lisp
  ;; (defun dap-netcore--populate-attach-args (conf)
  ;;   "Populate CONF with the attach arguments."
  ;;   (dap--put-if-absent conf :process-id? (read-string "Process ID:"))
  ;;   (dap--put-if-absent conf :dap-server-path (list (dap-netcore--debugger-locate) "--interpreter=vscode" "--engineLogging=c:/log.dbg")))

  (require 'dap-mode)
  (defun dap-netcore--populate-attach-args (conf)
    "Populate CONF with the attach arguments."
    (dap--put-if-absent conf :processId (string-to-number (read-string "Enter PID: " "2345")))
    (dap--put-if-absent conf :dap-server-path (list (dap-netcore--debugger-locate) "--interpreter=vscode")))

  (dap-register-debug-provider
   "coreclr-launch"
   'dap-netcore--populate-attach-args)

  (dap-register-debug-template ".Net Core Launch (Console)"
                               (list :type "coreclr-launch"
                                     :request "attach"
                                     :name "NetCoreDbg::Attach"
                                     :stopAtEntry t))

  (defun dap-netcore--populate-launch-args (conf)
    "Populate CONF with the default arguments."
    (dap--put-if-absent conf :program (expand-file-name (read-file-name "Select an executable:" (concat (lsp-workspace-root) "/bin/Debug"))))
    (dap--put-if-absent conf :dap-server-path (list (dap-netcore--debugger-locate) "--interpreter=vscode")))



  (dap-register-debug-provider
   "coreclr-attach"
   'dap-netcore--populate-attach-args)

  (dap-register-debug-provider
   "coreclr-launch"
   'dap-netcore--populate-launch-args)

  (dap-register-debug-template ".Net Core Attach (Console)"
                               (list :type "coreclr-attach"
                                     :request "attach"
                                     :name "NetCoreDbg::Attach"
                                     :stopAtEntry t))

  (dap-register-debug-template ".Net Core Launch (Console)"
                               (list :type "coreclr-launch"
                                     :request "launch"
                                     :name "NetCoreDbg::Launch"
                                     :stopAtEntry t))
#+end_src

** Velocity Web Development (vtl)

Using apache velocity template langage for ESA
#+begin_src emacs-lisp :results raw
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.vtl" . web-mode))
    :custom ((web-mode-code-indent-offset 2)
             (web-mode-css-indent-offset 2)
             (web-mode-markup-indent-offset 2)
             (web-mode-sql-indent-offset 2)))
#+end_src

** Emacs Lisp
#+begin_src emacs-lisp
  (use-package emacs-lisp-mode
    :straight nil
    :ensure nil
    :bind (("C-c C-x b" . eval-buffer)))
#+end_src

** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :custom ((typescript-indent-level 4)
             (typescript-ts-mode-indent-offset 4)))

  (add-to-list 'auto-mode-alist '("\\.tsx$" . tsx-ts-mode))
#+end_src

** Javascript

#+begin_src emacs-lisp
  (use-package js
    :straight nil
    :custom ((js-indent-level 4)))
#+end_src

** Python
#+begin_src emacs-lisp
  (use-package python
    :straight nil
    :custom ((python-indent 4)))
#+end_src

** Rust
#+begin_src emacs-lisp
(use-package rust-mode)
#+end_src

** Bazel Build

#+begin_src emacs-lisp
  (use-package bazel)
#+end_src

** Kotlin

#+begin_src emacs-lisp
(use-package kotlin-mode)
#+end_src

** Common Lisp/Slime setup [Deprecating in favor of Sly 06-Mar-2024]

** Common Lisp/Sly setup
#+begin_src emacs-lisp
  (use-package sly)
  (setq inferior-lisp-program "sbcl")

  ;; Slime contrip
  ;(require 'slime-autoloads)
#+end_src

Add init file as lisp file
#+begin_src emacs-lisp
;(add-to-list 'auto-mode-alist '("\\.sbclrc$" . lisp-mode))
#+end_src

** Paredit
#+begin_src emacs-lisp :results raw
  (use-package paredit
    :hook ((lisp-mode . enable-paredit-mode)
           (emacs-lisp-mode . enable-paredit-mode)))
#+end_src

** Lispy
#+begin_src emacs-lisp :results raw
  (use-package lispy)
#+end_src

** Combobulate
#+begin_src emacs-lisp :results raw
(use-package combobulate)
#+end_src

* SQL

#+begin_src emacs-lisp

  ;;; Sql Server Setup
  (defcustom sql-ms-program "sqlcmd"
        "Command to start ;osql; (replaced for sqlcmd) by Microsoft.

      Starts `sql-interactive-mode' after doing some setup."
        :type 'file
        :group 'SQL)

  (defcustom sql-ms-options '("-w" "65535" "-y" "79" "-s" "|" "-k" "-C" "-I")
  ;; -W is the linesize, -y truncates values after 79 chars, -s is separator '|' and -k removes control characters from output
  "List of additional options for `sql-ms-program'."
  :type '(repeat string)
  :version "22.1"
  :group 'SQL)

  ;; Load connections if there are any
  (let ((filename "~/sql-connections.el"))
    (if (file-exists-p filename)
        (load-file filename)))
#+end_src

#+RESULTS:
: t

* Pass and org-password for password management

#+begin_src emacs-lisp
  (use-package pass)
#+end_src

** Using org-password for password generation
#+begin_src emacs-lisp
  (use-package org-passwords
    :defer t)

  (use-package org-contrib
    :straight nil
    :after org-mode)

  (defun tja-password-insert ()
    (interactive)
    (insert (org-passwords-generate-password-with-symbols "" 20)))

  (defun tja-password-insert-no-symbols ()
        (interactive)
        (insert (org-passwords-generate-password-without-symbols "" 20)))
#+end_src

* Multiple cursors

#+begin_src emacs-lisp
    (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

* Additional Org Packages

** Org contrib.  I forget why this was in here but I think it was important
#+begin_src emacs-lisp
  (use-package org-contrib)
#+end_src

** Org Roam
Configures org roam, dailies, tags, capture templates

#+begin_src emacs-lisp
  (use-package org-roam
    :defer 3
    :init
    (setq org-roam-directory "~/org-roam")
    (setq org-roam-v2-ack t)
    (if (boundp 'org-roam-directory)
      (unless (file-exists-p org-roam-directory)
          (make-directory org-roam-directory)))
    (require 'org-roam-dailies)
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("v" "video" plain
        "\n* Source\n\nLink: %^{Link}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
        :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ))
    :bind (("C-c t" . org-roam-tag-add)
           ("C-c n l" . org-roam-buffer-toggle)
           ("C-c n i" . org-roam-node-insert)
           ("C-c d" . org-roam-dailies-goto-today)
           ("C-c o" . org-roam-node-find)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (org-roam-setup)
    (org-roam-db-autosync-mode))

  (setq org-roam-dailies-directory "daily/")
#+end_src

#+RESULTS:
: daily/

** Add gutters to org mode

#+begin_src emacs-lisp
      ;; Seems to mess up org superstar
      (defun tja-org-mode-visual-fill ()
        (setq visual-fill-column-width 150
              visual-fill-column-center-text t)
        (visual-fill-column-mode t))

      (use-package visual-fill-column
        :defer t
        :hook (org-mode . tja-org-mode-visual-fill))
#+end_src

** Org Transclusion

#+begin_src emacs-lisp
  (use-package org-transclusion
    :bind (:map org-mode-map
           ("<f11>" . org-transclusion-add)
           ("C-c n t" . org-transclusion-mode)))
#+end_src

** Org anki

#+begin_src emacs-lisp
    (use-package org-anki)
#+end_src

* Vue JS

#+begin_src emacs-lisp
(use-package vue-mode)
#+end_src

* Simple http server

#+begin_src emacs-lisp
  (use-package simple-httpd)
#+end_src

* String Inflection
#+begin_src emacs-lisp
  (use-package string-inflection)
#+end_src

* EDiff
This is trying to turn off opening ediff in a new frame since it does not work well with tiling wm's
https://emacs.stackexchange.com/questions/17064/never-create-frame-in-ediff
#+begin_src emacs-lisp
  ;; Kind of works, control window ends up in the same frame, but in a wonky spot
  (setq ediff-window-setup-function #'ediff-setup-windows-plain)

  (defun ediff-window-display-p () nil)
#+end_src

* HAM Mode (html and markdown)

#+begin_src emacs-lisp
  (use-package ham-mode)
#+end_src

* Winner Mode
#+begin_src emacs-lisp
  (use-package winner)
  (winner-mode)
#+end_src

* Html

Use web-mode as the default html mode
#+begin_src emacs-lisp :results raw
  (use-package web-mode
    :straight nil
    :config
    (add-to-list 'auto-mode-alist '("\\.html" . web-mode)))
#+end_src
* NXML

#+begin_src emacs-lisp
  (use-package nxml
    :straight nil
    :bind (;; Matching old ivy behavior
           ("C-c f" . sgml-skip-tag-forward)
           ;; Binding to allow inserting the current selection
           ("C-c b" . sgml-skip-tag-backward)))
#+end_src

* Beancount
#+begin_src emacs-lisp
  (use-package beancount
    :straight '(beancount :host github :repo "beancount/beancount-mode")
    ;;:hook (outline-minor-mode) ;; breaking outline-minor mode...
    :mode (("\\.beancount" . beancount-mode) ("\\.bean" . beancount-mode))
    :bind (("C-c C-n" . #'outline-next-visible-heading)
           ("C-c C-p" . #'outline-previous-visible-heading)))
#+end_src

* OAuth2
#+begin_src emacs-lisp
  (use-package oauth2)

  ;; (setq oauth2-authentication-uri "<Authorization endpoint URL>"
  ;;       oauth2-token-uri "<Token endpoint URL>"
  ;;       oauth2-client-id "<Client ID>"
  ;;       oauth2-client-secret "<Client Secret>")

  (defun tja-azure-active-directory-auth ()
    "Authenticate with Azure Active Directory and return an access token."
    (oauth2-auth-and-store
     "https://graph.windows.net"
     "https://graph.windows.net/.default"
     '("https://graph.windows.net/.default")))

  (defun tja-azure-active-directory-get-token ()
    "Get an Azure Active Directory OAuth token."
    (oauth2-auth-and-store
     "https://graph.windows.net"
     "https://graph.windows.net/.default"
     '("https://graph.windows.net/.default"))
    (oauth2-get-token oauth2-auth-mode nil))
#+end_src

* Jira [Obsoleted 2023-04-13]
** Jira package didn't work well 2023-04-13
#+begin_src emacs-lisp
  ;; (use-package xml-rpc)
  ;; (use-package jira)
#+end_src

* EJira
#+begin_src emacs-lisp
  (use-package jiralib2
    ;; 'cookie, 'token or 'basic
    :custom (jiralib2-auth 'token))
  (load "~/.jira-secrets.el") ;; Configuration loaded here
#+end_src

* To setup after playing with jiralib2
#+begin_src emacs-lisp
    ;; for token auth with JIRA Cloud
      ;; (use-package ejira
      ;;   :init
      ;;   (setq jiralib2-url              "TODO"
      ;;         jiralib2-auth             'basic
      ;;         jiralib2-user-login-name  "TODO"
      ;;         jiralib2-token            "TODO"
      ;;         ;jiralib2-token

      ;;         ;; NOTE, this directory needs to be in `org-agenda-files'`
      ;;         ejira-org-directory       "~/jira"
      ;;         ejira-projects            '("ECOMM")

      ;;         ejira-priorities-alist    '(("Highest" . ?A)
      ;;                                     ("High"    . ?B)
      ;;                                     ("Medium"  . ?C)
      ;;                                     ("Low"     . ?D)
      ;;                                     ("Lowest"  . ?E))
      ;;         ejira-todo-states-alist   '(("To Do"       . 1)
      ;;                                     ("In Progress" . 2)
      ;;                                     ("Done"        . 3)))
      ;;   :config
      ;;   ;; Tries to auto-set custom fields by looking into /editmeta
      ;;   ;; of an issue and an epic.
      ;;   (add-hook 'jiralib2-post-login-hook #'ejira-guess-epic-sprint-fields)

      ;;   ;; They can also be set manually if autoconfigure is not used.
      ;;   ;; (setq ejira-sprint-field       'customfield_10001
      ;;   ;;       ejira-epic-field         'customfield_10002
      ;;   ;;       ejira-epic-summary-field 'customfield_10004)

      ;;   (require 'ejira-agenda)

      ;;   ;; Make the issues visisble in your agenda by adding `ejira-org-directory'
      ;;   ;; into your `org-agenda-files'.
      ;;   (add-to-list 'org-agenda-files ejira-org-directory)

      ;;   ;; Add an agenda view to browse the issues that
      ;;   (org-add-agenda-custom-command
      ;;    '("j" "My JIRA issues"
      ;;      ((ejira-jql "resolution = unresolved and assignee = currentUser()"
      ;;                  ((org-agenda-overriding-header "Assigned to me")))))))
#+end_src

* MCT mode
#+begin_src emacs-lisp :tangle no
(straight-use-package '(mct :repo "protesilaos/mct"
			    :host gitlab))


(mct-mode 1)

(setq mct-remove-shadowed-file-names t) ; works when `file-name-shadow-mode' is enabled
(setq mct-hide-completion-mode-line t)
(setq mct-show-completion-line-numbers nil)
(setq mct-apply-completion-stripes t)
(setq mct-minimum-input 3)
(setq mct-live-update-delay 0.0)
#+end_src

#+RESULTS:
: 0.0

* Consult
Consult is a large package the looks like it replaces swiper

Here is a sample configuration I'm going through from the website
https://github.com/minad/consult

Using the consult configuration under the vertico heading - tja 26-May-2023

* Consult-dir

#+begin_src emacs-lisp :tangle no
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

#+RESULTS:
: consult-dir-jump-file

https://github.com/karthink/consult-dir

Swap vertico-map with  minibuffer-local-completion-map if not using vertico

* Adding org-babel-tangle as a safe form so I don't get bothered every time
#+begin_src emacs-lisp
(push '(add-hook 'after-save-hook 'org-babel-tangle nil t) safe-local-eval-forms)
#+end_src

* Clockify

#+begin_src emacs-lisp
  (use-package clockify
    :straight '(clockify :host github :repo "mdallastella/clockify.el"
                         :fork (:host github
               :repo "tjabell/clockify.el"))

    :config
    (load-file "~/.clockify-secrets.el")
    ;(setq m/clockify:*clockify-user-id*  (clockify--user-info))
    )
#+end_src

* CSV Mode
#+begin_src emacs-lisp :results raw
(use-package csv-mode)
#+end_src

* Restclient
#+begin_src emacs-lisp :results raw
(use-package restclient)
#+end_src

* TJA.el Add my Emacs lisp extensions
This file may have dependencies on libraries above

[[file:lisp/tja.org::*Org file for my private extensions to emacs packages][TJA.org file]]
#+begin_src emacs-lisp
(push "~/emacs/lisp/" load-path)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (org-babel-load-file "~/emacs/tja.org")

  (require 'm/gsi:vterm)
  (require 'tja-magit)
  (require 'tja-misc)
  (require 'tja-org)
  (require 'tja-ocr)
#+end_src

* Open this file and personal lisp on startup
#+begin_src emacs-lisp
  (find-file "~/emacs/tja.org")
  (find-file "~/emacs/dot-emacs.org")
#+end_src

* Latex

#+begin_src emacs-lisp :results raw
(use-package cdlatex)
#+end_src

* Emacs EDBI
#+begin_src emacs-lisp :results raw
  ;(use-package edbi)
#+end_src

* Edebug Alias

#+begin_src emacs-lisp :results raw
  (defalias 'edebug-toggle-global-debug-on-error 'toggle-debug-on-error)
#+end_src

* Local Variables - sets the after save hook to tangle this org file on save
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
