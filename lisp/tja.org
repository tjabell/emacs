-*- coding: utf-8 -*-

#+title: Emacs: New Config in an Org file
#+STARTUP: show3levels
#+property: header-args:emacs-lisp  :tangle ~/emacs/lisp/tja.el
* Org file for my private extensions to emacs packages
Installing, creating these

1. Create new top level header
2. Add :properties: section with output file
3. Autoload/provide
4. (require 'new-package) in dot-emacs.org

* Magit
#+begin_src emacs-lisp
  ;;; MAGIT EXTENSION FUNCTIONS
  ;;; Note: Converting to just use call process - shouldn't (require magit) anymore
  (require 'magit)

  (defun -get-autocommit-string (s)
    (format "[autocommit %s] %s" (shell-command-to-string "echo -n $(date +%Y-%m-%d)") s))

  ;;;###autoload
  (defun tja-magit-commit-all (message)
    (interactive "sCommit Message: ")
    (magit-call-git "commit" "-a" "-m" message)
    (magit-refresh))

  ;;;###autoload
  (defun tja-magit-commit-all-and-push (message)
    (interactive "sCommit Message: ")
    (magit-call-git "commit" "-a" "-m" message)
    (magit-call-git "push")
    (magit-refresh))

  ;; Only pushes project specific files (environment.org) and any todos
  (defun tja-magit-commit-rebase-push-project-files (repo &rest additional-files)
    (tja--call-git-process-no-output repo "fetch" "--all")
    (tja--call-git-process-no-output repo "add" "./environment.org")
    (if additional-files
        (apply 'tja--call-git-process-no-output (append (list repo "add") additional-files)))
    (tja--call-git-process-no-output
     repo "commit" "-m"
     (-get-autocommit-string "todos, env"))
    (tja--call-git-process-no-output repo "rebase" "origin/master")
    (tja--call-git-process-no-output repo "push"))

  (defun tja--call-git-process-no-output (repo &rest args)
    (apply 'call-process (append (list "git" nil nil nil "-C" repo) args)))

  (defun tja-magit-commit-all-rebase-push (repo &optional master)
    (tja--call-git-process-no-output repo "fetch" "--all")
    (tja--call-git-process-no-output repo "add" "-A")
    (tja--call-git-process-no-output
     repo "commit" "-a" "-m"
     (-get-autocommit-string "dailies"))
    (tja--call-git-process-no-output repo "rebase" (or master "origin/master"))
    (tja--call-git-process-no-output repo "push"))

  ;;;###autoload
  (defun tja-magit-commit-and-refresh-all-dailies ()
    (interactive)
    (let ((repo "/home/trevor/org-roam/"))
      (tja-magit-commit-all-rebase-push repo))
    (let ((repo "/home/trevor/emacs/"))
      (tja-magit-commit-all-rebase-push repo))
    (let ((repo "/home/trevor/projects/me"))
      (tja-magit-commit-all-rebase-push repo "origin/main")))

  ;;;###autoload
  (defun tja-magit-commit-and-refresh-all-projects ()
    (interactive)
    (let ((repo "/home/trevor/projects/goddard/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_goddard.org" "./apis.org"))
    (let ((repo "/home/trevor/projects/parsus/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_parsus.org" "./meeting_updates.org"))
    (let ((repo "/home/trevor/projects/acdhh/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_acdhh-cdbms.org" "./todo_acdhh-www.org"))
    (let ((repo "/home/trevor/projects/extended_stay/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_esa.org"))
    (let ((repo "/home/trevor/projects/me/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_misc.org")))


  (provide 'tja-magit)
#+end_src

* Vterm
#+begin_src emacs-lisp
  (require 'vterm)

  ;;; https://www.reddit.com/r/emacs/comments/ft84xy/run_shell_command_in_new_vterm/
  ;;; I really don't get what this is doing 20211029TJA
  (defun tja-vterm-run-in-vterm-kill (process event)
    "A process sentinel. Kills PROCESS's buffer if it is live."
    (let ((b (process-buffer process)))
      (and (buffer-live-p b)
           (kill-buffer b))))

  ;;;###autoload
  (defun tja-vterm-run-in-vterm (command)
    "Execute string COMMAND in a new vterm.

    Interactively, prompt for COMMAND with the current buffer's file
    name supplied. When called from Dired, supply the name of the
    file at point.

    Like `async-shell-command`, but run in a vterm for full terminal features.

    The new vterm buffer is named in the form `*foo bar.baz*`, the
    command and its arguments in earmuffs.

    When the command terminates, the shell remains open, but when the
    shell exits, the buffer is killed."
    (interactive
     (list
      (let* ((f (cond (buffer-file-name)
                      ((eq major-mode 'dired-mode)
                       (dired-get-filename nil t))))
             (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
        (read-shell-command "Terminal command: "
                            (cons filename 0)
                            (cons 'shell-command-history 1)
                            (list filename)))))
    (with-current-buffer (vterm (concat "*" command "*"))
      (set-process-sentinel vterm--process #'run-in-vterm-kill)
      (vterm-send-string command)
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-run-fbp-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FBP API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-franchiseeportal-api/")
      (vterm-send-return)
      (vterm-send-string "./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-run-faculty-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FACULTY API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-faculty-api/")
      (vterm-send-return)
      (vterm-send-string "./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-run-tours-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *TOURS API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-tours-api/")
      (vterm-send-return)
      (vterm-send-string "./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-run-content-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *CONTENT API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-content-api/")
      (vterm-send-return)
      (vterm-send-string "./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-run-fbp-web ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FBP WEB*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/FranchiseePortal-Website/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))
  ;;;###autoload
  (defun tja-vterm-run-fbp-test ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FBP Tests*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/FranchiseePortal-Website/")
      (vterm-send-return)
      (vterm-send-string "npm run test")
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-log-franchiseportal-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FBP WEB*"))
      (vterm-send-string "cd /home/trevor/")
      (vterm-send-return)
      (vterm-send-string "az webapp log tail --name ipaas-franchiseeportal-dev-useast-api --resource-group ipaas-dev-useast-rsg")
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-az-webapp-log (api-name environment)
    (interactive
     (list
      (completing-read "Api: "
                       '(("franchiseeportal")
                         ("content")
                         ("faculty")) nil t)
      (completing-read "Environment: "
                       '(("dev")
                         ("qa")) nil t)))
    (with-current-buffer (vterm (concat "* FBP API LOG Tail- " api-name " *"))
      (vterm-send-string "cd /home/trevor/")
      (vterm-send-return)
      (vterm-send-string (concat "az webapp log tail --name ipaas-" api-name "-" environment "-useast-api --resource-group ipaas-" environment "-useast-rsg"))
      (vterm-send-return)))

  ;;;###autoload
  (defun tja--log-aem (env instance log)
    (let ((number (if (string-equal env "qa") "85656" "77402")))
      (with-current-buffer (vterm (concat "*vterm* *AEM LOG: " env "-"instance " ERROR *"))
        (vterm-send-string "cd /home/trevor/")
        (vterm-send-return)
        (vterm-send-string (concat  "aio cloudmanager:tail-logs " number " " instance " " log))
        (vterm-send-return))))

  ;;;###autoload
  (defun tja-vterm-log-aem-author-dev-error ()
    (interactive)
    (tja--log-aem "dev" "author" "aemerror"))

  ;;;###autoload
  (defun tja-vterm-log-aem-publish-dev-error ()
    (interactive)
    (tja--log-aem "dev" "publish" "aemerror"))

  ;;;###autoload
  (defun tja-vterm-log-aem-author-qa-error ()
    (interactive)
    (tja--log-aem "qa" "author" "aemerror"))

  ;;;###autoload
  (defun tja-vterm-log-aem-publish-qa-error ()
    (interactive)
    (tja--log-aem-dev "qa" "publish" "aemerror"))

  ;;;###autoload
  (defun tja-vterm-esa-run-dotcms ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *DOTCMS*"))
      (vterm-send-string "cd /home/trevor/projects/extended_stay/src/frontend/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun tja-vterm-esa-run-esa-dotcms-node ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *DOTCMS - Frontend*"))
      (vterm-send-string "cd /home/trevor/projects/extended_stay/src/frontend/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup-node.sh")
      (vterm-send-return)))

  (defun tja-vterm-mtsinai-run-prepc ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *PREPC*"))
      (vterm-send-string "cd /home/trevor/projects/mtsinai/src/parsus-internal.mountsinai-prepc")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))
  (provide 'tja-vterm)
#+end_src

#+RESULTS:
: tja-vterm

* Misc fns
#+begin_src emacs-lisp
  ;;;###autoload
  (defun insert-current-date ()
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
  (defalias 'icd 'insert-current-date)

  (defun insert-current-date2 ()
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +%d-%b-%Y)")))
  (defalias 'icd2 'insert-current-date2)
  ;;;###autoload
  (defun insert-signature-for-code ()
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y%m%d)TJA")))
  (defalias 'isc 'insert-signature-for-code)

  ;;;###autoload
  (defun first-char-printer ()
    "Used this to print out katakana characters for anki slide deck"
    (interactive)
    (let ((c (string-to-char (buffer-substring (line-beginning-position) (1+ (line-beginning-position))))))
      (prin1 (get-char-code-property  c 'name) (current-buffer))))

  ;;;###autoload
  (defun ebpa/edebug-remove-all-instrumentation ()
    "Remove all edebug instrumentation by visiting each function
  definition and running `eval-defun`."
    (interactive)
    (mapatoms
     (lambda (symbol)
       (when-let (pos (car-safe (get symbol 'edebug)))
         (with-current-buffer (marker-buffer pos)
           (goto-char (marker-position pos))
           (eval-defun nil))))))

  ;;;###autoload
  (defun tja-newline-directly-below ()
    "1. move to end of the line.
     2. insert newline with index"
    (interactive)
    (let ((oldcol (current-column)))
      (end-of-line)
      (newline)
      (dotimes (i oldcol)
        (insert " "))))

  ;;; format a json string in a buffer
  ;;;###autoload
  (defun tja-json-mode-and-format-buffer ()
    (interactive)
    (json-mode)
    (json-pretty-print-buffer))

  ;; https://stackoverflow.com/questions/39861580/emacs-program-to-collapse-json-to-single-line
  (defun json-to-single-line (beg end)
    "Collapse prettified json in region between BEG and END to a single line"
    (interactive "r")
    (if (use-region-p)
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "\\s-+" nil t)
              (replace-match " "))))
      (print "This function operates on a region")))

  (defun json-escape-for-common-lisp (beg end)
    "escapes json for use in a common lisp string"
    (interactive "r")
    (if (use-region-p)
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "\"" nil t)
              (replace-match "\\\\\""))))
      (print "This function operates on a region")))

  (defalias 'jm 'tja-json-mode-and-format-buffer)

  (require 'notifications)

  ;;;###autoload
  (defun tja-remind-me-in (minutes body)
    (interactive "sMinutes:\nsBody:")
    (let ((minutes (concat minutes " min")))
      (run-at-time minutes nil 'notifications-notify :title "Emacs alert" :body body)))

  (provide 'tja-misc)

#+end_src

#+RESULTS:
: tja-misc

* Org

** org screenshot
#+begin_src emacs-lisp
  (defun tja-org-insert-image-from-wayland-clipboard ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
          (concat
           (make-temp-name
            (concat (buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (call-process "wl-paste" nil `(:file ,filename) nil "-t" "image/png")
    (insert (concat "[[" filename "]]"))
    (org-display-inline-images))

  (provide 'tja-org)  
#+end_src

* OCR
#+begin_src emacs-lisp
  ;;;###autoload
  (defun tja-ocr-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
          (concat
           (make-temp-name
            (concat (buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (call-process "wl-paste" nil `(:file ,filename) nil "-t" "image/png")
    (call-process "tesseract" nil t nil filename "stdout"))

  (provide 'tja-ocr)
#+end_src

* Azure

#+begin_src emacs-lisp
  (defun tja-insert-azure-title-text (ticket-number)
    (interactive "sTicket Number ")
    (insert (get-azure-title-text ticket-number)))

  (defun tja-get-azure-title-text (ticket-number)
    (interactive)
    (with-current-buffer
        (get-buffer-create
         (let* ((username "parsus-ta@goddardsystems.com")
                (password "")
                (ticket-url (format "https://dev.azure.com/GoddardSystemsIT/_apis/wit/workitems?ids=%s&api-version=6.1-preview.3" ticket-number))
                (url-request-extra-headers
                 `(("Authorization" . ,(concat "Basic "
                                               (base64-encode-string
                                                (concat username ":" password) t))))))
           (url-retrieve-synchronously ticket-url)))
      (goto-char (point-min))
      (re-search-forward "^$")
      (delete-region (point) (point-min))
      (let ((my-obj (json-parse-string (buffer-string))))
        (gethash "System.Title"
                 (gethash "fields"
                          (aref
                           (gethash "value" my-obj)
                           0))))))
#+end_src

#+RESULTS:
: tja-get-azure-title-text

* SQL

#+begin_src emacs-lisp
  (defun point-in-comment ()
  (let ((syn (syntax-ppss)))
    (and (nth 8 syn)
         (not (nth 3 syn)))))
  (defun tja-sql-capitalize-all-sqlserver-keywords (min max)
    (interactive "r")
    (require 'sql)
    (save-excursion
      (dolist (keywords sql-mode-ms-font-lock-keywords)
        (goto-char min)
        (while (re-search-forward (car keywords) nil t)
          (unless (or (point-in-comment) (> (point) max))
            (goto-char (match-beginning 0))
            (upcase-word 1))))))
#+end_src

* Arrayify
#+begin_src emacs-lisp
  (defun arrayify (start end quote)
    "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
    (interactive "r\nMQuote: ")
    (let ((insertion
           (mapconcat
            (lambda (x) (format "%s%s%s" quote x quote))
            (split-string (buffer-substring start end)) ", ")))
      (delete-region start end)
      (insert insertion)))
#+end_src

#+RESULTS:
: arrayify

* JS Beautify

#+begin_src emacs-lisp
  ;;; js-beautify.el -- beautify some js code

  (defgroup js-beautify nil
    "Use jsbeautify to beautify some js"
    :group 'editing)

  (defcustom js-beautify-args "--keep-array-indentation"
    "Arguments to pass to jsbeautify script"
    :type '(string)
    :group 'js-beautify)

  (defcustom js-beautify-path "/usr/bin/js-beautify"
    "Path to jsbeautifier node file"
    :type '(string)
    :group 'js-beautify)

  (defun js-beautify ()
    "Beautify a region of javascript using the code from jsbeautify.org"
    (interactive)
    (let ((orig-point (point))
          (js-beautify-command (concat js-beautify-path
                                       " "
                                       js-beautify-args
                                       " "
                                       "-f -")))
      (unless (mark)
        (mark-defun))
      (shell-command-on-region (point)
                               (mark)
                               js-beautify-command
                               nil t)
      (goto-char orig-point)))

  (provide 'js-beautify)
  ;;; js-beautify.el ends here
#+end_src

#+RESULTS:
: js-beautify

* EXPERIMENTAL

#+begin_src emacs-lisp

  ;;; https://gist.github.com/kristianhellquist/3082383#gistcomment-2373734
  (defun tja-copy-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
    (interactive)
    (let ((path-with-line-number
           (concat (buffer-file-name) ":" (number-to-string (line-number-at-pos)))))
      (kill-new path-with-line-number)
      (message (concat path-with-line-number " copied to clipboard"))))

  (defun tja-esa-frontend-copy-relative-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
    (interactive)
    (let ((path-with-line-number
           (concat (s-replace (expand-file-name (vc-root-dir)) ""  (buffer-file-name)) ":" (number-to-string (line-number-at-pos)))))
      (kill-new path-with-line-number)
      (message (concat path-with-line-number " copied to clipboard"))))

  (defun tja-copy-project-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
    (interactive)
    (cl-flet ((find-git-dir  ()
                          (file-truename
                           (locate-dominating-file (buffer-file-name (current-buffer)) ".git"))))
      (let* ((project-dir (find-git-dir))
            (path-with-line-number
             (concat "<proj>/" (s-replace project-dir ""  (buffer-file-name)) ":" (number-to-string (line-number-at-pos)))))
        (kill-new path-with-line-number)
        (message (concat path-with-line-number " copied to clipboard")))))

  ;;; ESA Functions to swap environments in URLs
  (defun my/esa:replace-url-with-local ()
    (interactive)
    (let ((regex "http\[s\]*://.*?/")
          (replacement "http://localhost:8080/"))
      (while (re-search-forward regex nil t)
        (replace-match replacement))))


  ;;; Run in Vterm
  (defun my/insert-shrug ()
    (interactive)
    (insert "¯\_(ツ)_/¯"))

#+end_src

#+RESULTS:
: my/insert-shrug

* Local Variables - sets the after save hook to tangle this org file on save
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
