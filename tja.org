-*- coding: utf-8 -*-

#+title: Emacs: New Config in an Org file
#+STARTUP: show3levels
#+property: header-args:emacs-lisp  :tangle ~/emacs/tja.el

* Read only mode

#+begin_src emacs-lisp :results raw

  ;; Define a minor mode for read-only navigation
  (defvar read-only-navigation-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "n") 'next-line)
      (define-key map (kbd "p") 'previous-line)
      (define-key map (kbd "f") 'forward-char)
      (define-key map (kbd "b") 'backward-char)
      (define-key map (kbd "e") 'end-of-line)
      (define-key map (kbd "a") 'beginning-of-line)
      (define-key map (kbd "v") 'scroll-up-command)
      map)
    "Keymap for `read-only-navigation-mode`.")

  (define-minor-mode read-only-navigation-mode
    "Minor mode to use simple navigation keys in `read-only-mode`."
    :lighter " RO-NAV"
    :keymap read-only-navigation-mode-map)

  ;; Enable the minor mode when `read-only-mode` is active
  (defun enable-read-only-navigation-mode ()
    "Enable `read-only-navigation-mode` when in `read-only-mode`."
    (if buffer-read-only
        (read-only-navigation-mode 1)
      (read-only-navigation-mode -1)))

  (add-hook 'read-only-mode-hook 'enable-read-only-navigation-mode)



#+end_src

* Mail

Not using mail so let's unset the send-mail key

#+begin_src emacs-lisp :results raw
  (global-unset-key (kbd "C-x m"))
#+end_src

#+RESULTS:
nil

* Org file for my private extensions to emacs packages

Installing, creating these

1. Create new top level header
2. Add :properties: section with output file
3. Autoload/provide
4. (require 'new-package) in dot-emacs.org

* Git

#+begin_src emacs-lisp :results raw
  (defun m/git:check-and-switch-git-branch (dir branch)
    "Check if the Git repository in DIR is on the specified BRANCH.
  If not, try to switch to that branch. Print a warning if the branch doesn't exist."
    (let* ((default-directory dir)
           (current-branch (string-trim (shell-command-to-string (format "git -C %s rev-parse --abbrev-ref HEAD" dir)))))
      (if (string-equal current-branch branch)
          (message "Already on branch '%s'." branch)
        (if (string-match-p (regexp-quote branch)
                            (shell-command-to-string (format "git -C %s branch --list" dir)))
            (progn
              (shell-command (format "git -C %s checkout %s" dir branch))
              (message "Switched to branch '%s'." branch))
          (message "Warning: Branch '%s' does not exist in the repository at '%s'." branch dir)))))
#+end_src

#+RESULTS:
m/git:check-and-switch-git-branch

* Magit

#+begin_src emacs-lisp
  ;;; MAGIT EXTENSION FUNCTIONS
  ;;; Note: Converting to just use call process - shouldn't (require magit) anymore
  (require 'magit)

  (defun -get-autocommit-string (s)
    (format "[autocommit %s] %s" (shell-command-to-string "echo -n $(date +%Y-%m-%d)") s))

  ;;;###autoload
  (defun tja-magit-commit-all (message)
    (interactive "sCommit Message: ")
    (magit-call-git "commit" "-a" "-m" message)
    (magit-refresh))

  ;;;###autoload
  (defun tja-magit-commit-all-and-push (message)
    (interactive "sCommit Message: ")
    (magit-call-git "commit" "-a" "-m" message)
    (magit-call-git "push")
    (magit-refresh))

  ;; Only pushes project specific files (environment.org) and any todos
  (defun tja-magit-commit-rebase-push-project-files (repo &rest additional-files)
    (tja--call-git-process-no-output repo "fetch" "--all")
    (tja--call-git-process-no-output repo "add" "./environment.org")
    (if additional-files
        (apply 'tja--call-git-process-no-output (append (list repo "add") additional-files)))
    (tja--call-git-process-no-output
     repo "commit" "-m"
     (-get-autocommit-string "todos, env"))
    (tja--call-git-process-no-output repo "rebase" "origin/master")
    (tja--call-git-process-no-output repo "push"))

  (defun tja--call-git-process-no-output (repo &rest args)
    (apply 'call-process (append (list "git" nil nil nil "-C" repo) args)))

  (defun tja-magit-commit-all-rebase-push (repo &optional master)
    (tja--call-git-process-no-output repo "fetch" "--all")
    (tja--call-git-process-no-output repo "add" "-A")
    (tja--call-git-process-no-output
     repo "commit" "-a" "-m"
     (-get-autocommit-string "dailies"))
    (tja--call-git-process-no-output repo "rebase" (or master "origin/master"))
    (tja--call-git-process-no-output repo "push"))

  ;;;###autoload
  (defun tja-magit-commit-and-refresh-all-dailies ()
    (interactive)
    (let ((repo "/home/trevor/org-roam/"))
      (tja-magit-commit-all-rebase-push repo))
    (let ((repo "/home/trevor/emacs/"))
      (tja-magit-commit-all-rebase-push repo))
    (let ((repo "/home/trevor/projects/me"))
      (tja-magit-commit-all-rebase-push repo "origin/main")))

  ;;;###autoload
  (defun tja-magit-commit-and-refresh-all-projects ()
    (interactive)
    (let ((repo "/home/trevor/projects/goddard/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_goddard.org" "./apis.org"))
    (let ((repo "/home/trevor/projects/parsus/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_parsus.org" "./meeting_updates.org"))
    (let ((repo "/home/trevor/projects/acdhh/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_acdhh-cdbms.org" "./todo_acdhh-www.org"))
    (let ((repo "/home/trevor/projects/extended_stay/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_esa.org"))
    (let ((repo "/home/trevor/projects/me/"))
      (tja-magit-commit-rebase-push-project-files repo "./todo_misc.org")))


  (provide 'tja-magit)
#+end_src

* Compile

#+begin_src emacs-lisp :results raw
  (setq special-display-buffer-names
        '("*compilation*"))

  ;; Stop compilation buffer from appearing in new window
  (setq special-display-function
        (lambda (buffer &optional args)
          (get-buffer-window buffer 0)))

  ;;;###autoload
  (defun tja-compile-leads-api-unit-tests ()
    (interactive)
    (compile "dotnet test /home/trevor/projects/goddard/src/ipaas-leads-api/Goddard.LeadsApi.UnitTests/Goddard.LeadsApi.UnitTests.csproj"))

  (defun my:get-integration-test-command-with-filter (testcmd filter)
    (let* ((cmd (concat "dotnet test --logger='console;verbosity=detailed' " testcmd))
           (cmd (if (> (length filter) 0) (concat cmd " --filter \"" filter "\"") cmd)))
      cmd))

  ;;;###autoload
  (defun my:compile-leads-api-integration-tests (filter)
    (interactive "sFilter: ")
    (let ((cmd (my:get-integration-test-command-with-filter
                "/home/trevor/projects/goddard/src/ipaas-leads-api/Goddard.LeadsApi.IntegrationTests/Goddard.LeadsApi.IntegrationTests.csproj"
                filter)))
      (compile cmd)))

  ;;;###autoload
  (defun my:compile-recognitions-api-integration-tests (filter)
    (interactive "sFilter: ")
    (let ((cmd (my:get-integration-test-command-with-filter
                "/home/trevor/projects/goddard/src/ipaas-recognitions-api/GoddardRecognitions.IntegrationTests/GoddardRecognitions.IntegrationTests.csproj"
                filter)))
      (compile cmd)))

  ;;;###autoload
  (defun m/gsi:compile-tours-api-unit-tests ()
    (interactive)
    (compile "dotnet test /home/trevor/projects/goddard/src/ipaas-tours-api/Goddard.ToursWebApi.UnitTests/Goddard.ToursWebApi.UnitTests.csproj"))

  ;;;###autoload
  (defun m/gsi:compile-tours-api-integration-tests (filter)
    (interactive "sFilter: ")
    (let ((cmd (my:get-integration-test-command-with-filter "/home/trevor/projects/goddard/src/ipaas-tours-api/Goddard.ToursWebApi.IntegrationTests/Goddard.ToursWebApi.IntegrationTests.csproj" filter)))
      (compile cmd)))
#+end_src

#+RESULTS:
m/gsi:compile-tours-api-integration-tests
tja-compile-leads-api-integration-test

* Vterm
#+begin_src emacs-lisp
  (require 'vterm)

  (defvar *CUSTOM-BRANCH* "custom/local-changes")

  (defun open-or-start-vterm-buffer (buf folder startup-script)
    (if (buffer-live-p (get-buffer buf))
        (switch-to-buffer buf)
      (with-current-buffer (vterm (concat buf))
        (vterm-send-string (concat "cd " folder))
        (vterm-send-return)
        (vterm-send-string startup-script)
        (vterm-send-return))))

  ;;; https://www.reddit.com/r/emacs/comments/ft84xy/run_shell_command_in_new_vterm/
  ;;; I really don't get what this is doing 20211029TJA
  (defun m/gsi:vterm-run-in-vterm-kill (process event)
    "A process sentinel. Kills PROCESS's buffer if it is live."
    (let ((b (process-buffer process)))
      (and (buffer-live-p b)
           (kill-buffer b))))

  ;;;###autoload
  (defun m/gsi:vterm-run-in-vterm (command)
    "Execute string COMMAND in a new vterm.

            Interactively, prompt for COMMAND with the current buffer's file
            name supplied. When called from Dired, supply the name of the
            file at point.

            Like `async-shell-command`, but run in a vterm for full terminal features.

            The new vterm buffer is named in the form `*foo bar.baz*`, the
            command and its arguments in earmuffs.

            When the command terminates, the shell remains open, but when the
            shell exits, the buffer is killed."
    (interactive
     (list
      (let* ((f (cond (buffer-file-name)
                      ((eq major-mode 'dired-mode)
                       (dired-get-filename nil t))))
             (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
        (read-shell-command "Terminal command: "
                            (cons filename 0)
                            (cons 'shell-command-history 1)
                            (list filename)))))
    (with-current-buffer (vterm (concat "*" command "*"))
      (set-process-sentinel vterm--process #'run-in-vterm-kill)
      (vterm-send-string command)
      (vterm-send-return)))


  ;;;###autoload
  (defun m/gsi:vterm-run-beancount-fava ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *BEANCOUNT FAVA*"
     "/home/trevor/env/tools/"
     ". ./start-beancount-fava.sh"))

  (defun m/gsi:vterm-run-beancount-import ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *BEANCOUNT IMPORT*"
     "/home/trevor/env/tools/"
     ". ./start-beancount-import.sh"))

  ;;;###autoload
  (defun m/gsi:vterm-connect-vpn-equinox ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *EQUINOX VPN*"
     "/home/trevor/projects/equinox"
     "~/.secrets.sh && echo $EQUINOXPWD | sudo openconnect --no-dtls vpn.eqpmt.net -u eqpmt.net\\tabell -v"))

  ;;;###autoload
  (defun m/gsi:vterm-connect-vpn-goddard ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *GODDARD VPN*"
     "/home/trevor/projects/goddard"
     "~/.secrets.sh && echo $GODDARDPWD | sudo openconnect --no-dtls vpn.goddardsystems.com -u parsus-ta"))

  ;;;###autoload
  (defun m/gsi:vterm-run-fbp-api ()
    (interactive)
    (let* ((project-dir "/home/trevor/projects/goddard/src/ipaas-franchiseeportal-api/")
           (custom-branch "custom/local-changes"))
      (m/git:check-and-switch-git-branch project-dir custom-branch)
      (open-or-start-vterm-buffer
       "*vterm* *FBP API*"
       "/home/trevor/projects/goddard/src/ipaas-franchiseeportal-api/"
       ". ./local-startup.sh")))

  ;;;###autoload
  (defun m/gsi:vterm-stop-fbp-api ()
    (interactive)
    (m/vterm:stop "*vterm* *FBP API*"))

  ;;;###autoload
  (defun m/gsi:vterm-run-fbp-api-test ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FBP API Tests*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-franchiseeportal-api/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup-tests.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun m/gsi:vterm-run-schools-api-test ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FBP Schools API Tests*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-schools-api/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup-tests.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun m/gsi:vterm-run-faculty-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FACULTY API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-faculty-api/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun m/gsi:vterm-run-schools-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *SCHOOLS API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-schools-api/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
  (defun m/gsi:vterm-run-authorization-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *AUTHORIZATION API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-authorization-api/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))

  ;;;###autoload
      (defun m/gsi:vterm-run-mock-gsi-servers ()
        (interactive)
        (with-current-buffer (vterm (concat "*vterm* *MOCK GSI SERVERS*"))
          (vterm-send-string "cd /home/trevor/projects/goddard/src/mock-crm-server/")
          (vterm-send-return)
          (vterm-send-string "./mock-gsi-servers")
          (vterm-send-return)))

  ;;;###autoload
  (defun m/gsi:vterm-run-tours-api ()
    (interactive)
    (let ((project-dir "/home/trevor/projects/goddard/src/ipaas-tours-api/")
          (branch *CUSTOM-BRANCH*))
      (m/git:check-and-switch-git-branch project-dir branch)
      (open-or-start-vterm-buffer
       "*vterm* *TOURS API*"
       project-dir
       ". ./local-startup.sh")))

  ;;;###autoload
  (defun m/gsi:vterm-run-school-events-api ()
    (interactive)
    (let* ((project-dir "/home/trevor/projects/goddard/src/ipaas-schoolevents-api/")
             (custom-branch "custom/local-changes"))
        (m/git:check-and-switch-git-branch project-dir custom-branch)
        (open-or-start-vterm-buffer
         "*vterm* *SCHOOL EVENTS API*"
         project-dir
         ". ./local-startup.sh")))

  (defun m/gsi:vterm-stop-tours-api ()
    (interactive)
    (m/vterm:stop "*vterm* *TOURS API*"))

  ;;;###autoload
  (defun m/gsi:vterm-run-tours-api-test ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *FBP TOURS API Tests*"
     "/home/trevor/projects/goddard/src/ipaas-tours-api/"
     ". ./local-startup-tests.sh"))

  ;;;###autoload
  (defun m/gsi:vterm-run-leads-api ()
    (interactive)
    (let ((project-dir "/home/trevor/projects/goddard/src/ipaas-leads-api/")
          (branch *CUSTOM-BRANCH*))
      (m/git:check-and-switch-git-branch project-dir branch)
      (open-or-start-vterm-buffer
       "*vterm* *LEADS API*"
       project-dir
       ". ./local-startup.sh")))

  ;;;###autoload
  (defun m/gsi:vterm-run-recognitions-api ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *RECOGNITIONS API*"
     "/home/trevor/projects/goddard/src/ipaas-recognitions-api/"
     ". ./local-startup.sh"))

  (defun m/vterm:stop (buffer)
    "Stop a vterm buffer by its name BUFFER."
    (when (get-buffer buffer)
      (with-current-buffer buffer
        (when (and (derived-mode-p 'vterm-mode)
                   (get-buffer-process buffer))
          (ignore-errors
            (vterm-send-string "\C-c")
            (sleep-for 1)  ;; Reduce sleep time if possible
            (let ((kill-buffer-query-functions nil))
              (kill-buffer buffer)))))))

  (defun m/gsi:vterm-stop-leads-api ()
    (interactive)
    (m/vterm:stop "*vterm* *LEADS API*"))

  ;;;###autoload
  (defun m/gsi:vterm-run-leads-api-unit-test ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *FBP LEADS API Tests*"
     "/home/trevor/projects/goddard/src/ipaas-leads-api/"
     ". ./local-startup-unit-tests.sh"))

  ;;;###autoload
  (defun m/gsi:vterm-run-content-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *CONTENT API*"))
      (vterm-send-string "cd /home/trevor/projects/goddard/src/ipaas-content-api/")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))

  (require 'json-mode)

  (defun curl-and-format-json (url buffer-name)
    "Fetch JSON data from the given URL using curl, place the result in a new buffer,
       set the buffer to json-mode, and format the buffer."
    (interactive "sEnter URL: ")
    (let ((json-buffer (generate-new-buffer buffer-name)))
      (with-current-buffer json-buffer
        (shell-command (concat "curl -sb -H 'Accept: application/json' '" url "'") t)
        (json-mode)
        (json-pretty-print-buffer))
      (pop-to-buffer json-buffer)))

  (defun m/gsi:execute-content-api-call-qa-schools-randolph ()
    (interactive)
    (curl-and-format-json "https://ipaas-content-qa-useast-api.azurewebsites.net/api/v1/dcp/schools?crmId=09eaf707-0c18-db11-b2e1-0014221c4264" "*CONTENT-API-SCHOOLS-RANDOLPH*"))


  ;;;###autoload
  (defun m/gsi:vterm-run-content-api-unit-test ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *FBP CONTENT API Tests*"
     "/home/trevor/projects/goddard/src/ipaas-content-api/src/Goddard.ContentWebApiUnitTests"
     ". ./local-startup-unit-tests.sh"))

  ;;;###autoload
  (defun m/gsi:vterm-run-fbp ()
    (interactive)
    (m/gsi:vterm-run-fbp-api)
    (m/gsi:vterm-run-fbp-web)
    ;; Schools api needed for login.  Other local apis can be run as required.
    (m/gsi:vterm-run-schools-api)
    (m/gsi:vterm-run-authorization-api)
    (m/gsi:vterm-run-mock-gsi-servers))

  ;;;###autoload
  (defun m/gsi:vterm-run-fbp-for-tours ()
    (interactive)
    (m/gsi:vterm-run-fbp-api)
    (m/gsi:vterm-run-fbp-web)
    ;; Schools api needed for login.  Other local apis can be run as required.
    (m/gsi:vterm-run-schools-api)
    (m/gsi:vterm-run-tours-api)
    (m/gsi:vterm-run-leads-api)
    (m/gsi:vterm-run-mock-gsi-servers))

  ;;;###autoload
  (defun m/gsi:vterm-stop-fbp ()
    (interactive)
    (m/gsi:vterm-stop-fbp-web)
    (m/gsi:vterm-stop-fbp-api)
    (m/gsi:vterm-stop-tours-api)
    (m/gsi:vterm-stop-leads-api)
    (m/vterm:stop "*vterm* *RECOGNITIONS API*")
    (m/vterm:stop "*vterm* *FACULTY API*")
    (m/vterm:stop "*vterm* *SCHOOLS API*")
    (m/vterm:stop "*vterm* *SCHOOL EVENTS API*")
    (m/vterm:stop "*vterm* *CONTENT API*")
    (m/vterm:stop "*vterm* *AUTHORIZATION API*")
    (m/vterm:stop "*vterm* *MOCK GSI SERVERS*"))

  ;;;###autoload
  (defun m/gsi:vterm-run-fbp-web ()
    (interactive)
    (let* ((project-dir "/home/trevor/projects/goddard/src/FranchiseePortal-Website/")
           (custom-branch "custom/local-changes"))
      (m/git:check-and-switch-git-branch project-dir custom-branch)
      (open-or-start-vterm-buffer
       "*vterm* *FBP Web*"
       project-dir
       ". ./local-startup.sh")))

  (defun m/gsi:vterm-stop-fbp-web ()
    (interactive)
    (m/vterm:stop "*vterm* *FBP Web*"))

  ;;;###autoload
  (defun m/gsi:vterm-run-fbp-web-test ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *FBP Web Tests*"
     "/home/trevor/projects/goddard/src/FranchiseePortal-Website/"
     ". ./local-startup-test.sh"))

  ;;;###autoload
  (defun m/gsi:vterm-log-franchiseportal-api ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *FBP WEB*"))
      (vterm-send-string "cd /home/trevor/")
      (vterm-send-return)
      (vterm-send-string "az webapp log tail --name ipaas-franchiseeportal-dev-useast-api --resource-group ipaas-dev-useast-rsg")
      (vterm-send-return)))

  ;;;###autoload
  (defun m/gsi:vterm-az-webapp-log (api-name environment)
    (interactive
     (list
      (completing-read "Api: "
                       '(("franchiseeportal")
                         ("content")
                         ("faculty")) nil t)
      (completing-read "Environment: "
                       '(("dev")
                         ("qa")) nil t)))
    (with-current-buffer (vterm (concat "* FBP API LOG Tail- " api-name " *"))
      (vterm-send-string "cd /home/trevor/")
      (vterm-send-return)
      (vterm-send-string (concat "az webapp log tail --name ipaas-" api-name "-" environment "-useast-api --resource-group ipaas-" environment "-useast-rsg"))
      (vterm-send-return)))

  ;;;###autoload
  (defun my:-log-aem (env instance log)
    (let ((number (if (string-equal env "qa") "85656" "77402")))
      (with-current-buffer (vterm (concat "*vterm* *AEM LOG: " env "-"instance " ERROR *"))
        (vterm-send-string "cd /home/trevor/")
        (vterm-send-return)
        (vterm-send-string (concat  "aio cloudmanager:tail-logs " number " " instance " " log))
        (vterm-send-return))))

  ;;;###autoload
  (defun m/gsi:vterm-log-aem-author-dev-error ()
    (interactive)
    (my:-log-aem "dev" "author" "aemerror"))

  ;;;###autoload
  (defun m/gsi:vterm-log-aem-publish-dev-error ()
    (interactive)
    (my:-log-aem "dev" "publish" "aemerror"))

  ;;;###autoload
  (defun m/gsi:vterm-log-aem-author-qa-error ()
    (interactive)
    (my:-log-aem "qa" "author" "aemerror"))

  ;;;###autoload
  (defun m/gsi:vterm-log-aem-publish-qa-error ()
    (interactive)
    (my:-log-aem-dev "qa" "publish" "aemerror"))

  ;;;###autoload
  (defun m/esa:vterm-esa-run-dotcms-server ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *DOTCMS*"
     "/home/trevor/projects/extended_stay/src/frontend/"
     ". ./local-startup.sh"))

  ;;;###autoload
  (defun m/esa:vterm-esa-run-dotcms-server-franchise-site ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *DOTCMS - FRANCHISE*"
     "/home/trevor/projects/extended_stay/src/cms.ms.common"
     ". ./local-startup.sh"))

  (defun m/esa:vterm-run-mock-apis-server ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *DOTCMS - MOCK APIS*"
     "/home/trevor/projects/extended_stay/src/esa-cl-server/"
     "./start-mock-apis-server"))

  ;;;###autoload
  (defun m/esa:vterm-esa-run-dotcms ()
    "Runs dotcms, node, and booking repos"
    (interactive)
    (m/esa:vterm-esa-run-dotcms-server)
    (m/esa:vterm-esa-run-dotcms-node-watch)
    (m/esa:vterm-esa-run-dotcms-node-serve)
    (m/esa:vterm-run-mock-apis-server)
    (sleep-for 3)                             ;; Let dotcms spin up on port 80808 before running the booking repo
    (m/esa:vterm-esa-run-booking)
    ;; The dotcms buffer might need sudo, switch to that
    (switch-to-buffer "*vterm* *DOTCMS*"))

  ;;;###autoload
  (defun m/esa:vterm-esa-stop-dotcms ()
      "Runs dotcms, node, and booking repos"
      (interactive)
      (m/vterm:stop "*vterm* *DOTCMS - FRANCHISE*")
      (m/vterm:stop "*vterm* *DOTCMS*")
      (m/vterm:stop "*vterm* *DOTCMS - Frontend Watch*")
      (m/vterm:stop "*vterm* *DOTCMS - Frontend Serve*")
      (m/vterm:stop "*vterm* *ESA Booking Repo*")
      (m/vterm:stop "*vterm* *DOTCMS - MOCK APIS*"))

  ;;;###autoload
  (defun m/esa:vterm-esa-run-booking ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *ESA Booking Repo*"
     "/home/trevor/projects/extended_stay/src/booking/"
     ". ./local-startup.sh"))

  ;;;###autoload
  (defun m/esa:vterm-esa-run-dotcms-node-watch ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *DOTCMS - Frontend Watch*"
     "/home/trevor/projects/extended_stay/src/frontend/"
     ". ./local-startup-node.sh"))

  ;;;###autoload
  (defun m/esa:vterm-esa-run-dotcms-node-watch-franchise ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *DOTCMS Franchise - Frontend Watch*"
     "/home/trevor/projects/extended_stay/src/cms.ms.common"
     ". ./local-startup-node.sh"))

  (defun m/esa:vterm-esa-run-dotcms-node-serve ()
    (interactive)
    (open-or-start-vterm-buffer
     "*vterm* *DOTCMS - Frontend Serve*"
     "/home/trevor/projects/extended_stay/src/frontend/"
     ;; For some reason I put the . in front of the script, so using ; to get around it here
     "; npm run serve-assets"))

  (defun m/mtsinai:vterm-mtsinai-run-prepc ()
    (interactive)
    (with-current-buffer (vterm (concat "*vterm* *PREPC*"))
      (vterm-send-string "cd /home/trevor/projects/mtsinai/src/parsus-internal.mountsinai-prepc")
      (vterm-send-return)
      (vterm-send-string ". ./local-startup.sh")
      (vterm-send-return)))

  (defun m/net:get-wlan-ip-address ()
    "Retrieve the IP address of the wlan interface."
    (interactive)
    (let ((ip-output (shell-command-to-string "ip addr show wlan0 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1")))
      (string-trim ip-output)))

  (defun m/wayvnc:check-or-start-wayvnc ()
    "Check if WayVNC is running, start it if not, and return its PID."
    (interactive)
    (let ((wayvnc-pid (shell-command-to-string "pgrep wayvnc"))
          (ip-to-bind (m/net:get-wlan-ip-address)))
      (if (string-empty-p wayvnc-pid)
          (progn
            (start-process "wayvnc" "*wayvnc*" "wayvnc"
                           "--output=HEADLESS-1"
                           "--max-fps=30"
                           ip-to-bind
                           "5900"
                           "-Ldebug")
            (message "WayVNC started on ip %s." ip-to-bind))
        (message "WayVNC is already running with PID: %s Probably on IP %s" (string-trim wayvnc-pid) ip-to-bind)
        (string-trim wayvnc-pid))))

  (defun m/sway:check-or-create-headless-output ()
    "Check if a headless output 'HEADLESS-1' exists. If not, create it using swaymsg."
    (interactive)
    (let ((output-exists
           (shell-command-to-string "swaymsg -t get_outputs | grep 'HEADLESS-1'")))
      (if (string-empty-p (string-trim output-exists))
          (progn
            (shell-command
             "swaymsg create_output HEADLESS-1 resolution '2388x1668'")
            (shell-command
             "swaymsg output HEADLESS-1 resolution '2388x1668'")
            (message "Created headless output 'HEADLESS-1' with resolution 1668x2388."))
        (message "Headless output 'HEADLESS-1' already exists."))))

  (provide 'm/gsi:vterm)
#+end_src

#+RESULTS:
: m/gsi:vterm

* Misc functions
#+begin_src emacs-lisp

  (defun m/replace-strings-in-region-with-random (start end)
    "Parse a list in the region between START and END.
  Replace each string in the list with a random string of the same length."
    (interactive "r")
    (save-excursion
      (goto-char start)
      (while (re-search-forward "\"\\([^\"]+\\)\"" end t)
        (let* ((original-string (match-string 1))
               (random-string (mapconcat (lambda (_) (char-to-string (+ ?a (random 26))))
                                         (make-list (length original-string) nil)
                                         "")))
          (replace-match (concat "\"" random-string "\"") t t)))))

  ;; Join Lines from: https://whatacold.io/blog/2023-06-12-emacs-join-lines/
  ;;;###autoload
  (defvar m/join-lines--last-separator ","
    "Keep the last used separator for `w/join-lines', a comma by default.")

  ;;;###autoload
  (defun m/join-lines (&optional specify-separator)
    "Join lines in the active region by a separator, by default the last used.
  Specify the separator by typing C-u before executing this command.

  Note: it depends on s.el."
    (interactive "P")
    (require 's)
    (unless (region-active-p)
      (error "select a region of lines first."))
    (let* ((separator (if (not specify-separator)
                          m/join-lines--last-separator
                        (read-string "Separator: ")))
           (text (buffer-substring-no-properties
                 (region-beginning)
                 (region-end)))
           (lines (split-string text "\n"))
           (result (s-join separator lines)))
      (delete-region (region-beginning) (region-end))
      (insert result)
      (setq w/join-lines--last-separator separator)))

  ;;;###autoload
  (defun m/straight-open-repository-directory ()
  "Open the Straight.el repository directory."
  (interactive)
  (let ((repository-dir (straight--repos-dir)))
    (when repository-dir
      (find-file repository-dir))))

  ;;;###autoload
  (defun m/convert-spaces-to-underscores (start end)
    "Converts dashes to underscores in the region between START and END."
    (interactive "r")
    (save-excursion
      (goto-char start)
      (while (search-forward " " end t)
        (replace-match "_" nil t))))

  ;;;###autoload
  (defun m/convert-dashes-to-underscores (start end)
    "Converts dashes to underscores in the region between START and END."
    (interactive "r")
    (save-excursion
      (goto-char start)
      (while (search-forward "-" end t)
        (replace-match "_" nil t))))


  ;;;###autoload
  (defun m/copy-buffer-filename-to-kill-ring ()
    "Copy the filename of the current buffer to the kill ring."
    (interactive)
    (when buffer-file-name
      (kill-new buffer-file-name)
      (message "Filename copied to kill ring: %s" buffer-file-name)))

  ;;;###autoload
  (defun m/insert-current-date ()
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))
  (defalias 'm/icd 'm/insert-current-date)

  (defun m/insert-current-date2 ()
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +%d-%b-%Y)")))
  (defalias 'm/icd2 'm/insert-current-date2)

  ;;;###autoload
  (defun m/insert-signature-for-code ()
    (interactive)
    (insert (shell-command-to-string "echo -n tja_$(date +%Y%m%d)")))
  (defalias 'isc 'insert-signature-for-code)

  ;;;###autoload
  (defun first-char-printer ()
    "Used this to print out katakana characters for anki slide deck"
    (interactive)
    (let ((c (string-to-char (buffer-substring (line-beginning-position) (1+ (line-beginning-position))))))
      (prin1 (get-char-code-property  c 'name) (current-buffer))))

  ;;;###autoload
  (defun ebpa/edebug-remove-all-instrumentation ()
    "Remove all edebug instrumentation by visiting each function
  definition and running `eval-defun`."
    (interactive)
    (mapatoms
     (lambda (symbol)
       (when-let (pos (car-safe (get symbol 'edebug)))
         (with-current-buffer (marker-buffer pos)
           (goto-char (marker-position pos))
           (eval-defun nil))))))

  ;;;###autoload
  (defun tja-newline-directly-below ()
    "1. move to end of the line.
     2. insert newline with index"
    (interactive)
    (let ((oldcol (current-column)))
      (end-of-line)
      (newline)
      (dotimes (i oldcol)
        (insert " "))))

  ;;; format a json string in a buffer
  ;;;###autoload
  (defun tja-json-mode-and-format-buffer ()
    (interactive)
    (json-mode)
    (json-pretty-print-buffer))

  ;; https://stackoverflow.com/questions/39861580/emacs-program-to-collapse-json-to-single-line
  (defun m/json-to-single-line (beg end)
    "Collapse prettified json in region between BEG and END to a single line"
    (interactive "r")
    (if (use-region-p)
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "\\s-+" nil t)
              (replace-match " "))))
      (print "This function operates on a region")))

  (defun m/json-escape-for-common-lisp (beg end)
    "escapes json for use in a common lisp string"
    (interactive "r")
    (if (use-region-p)
        (save-excursion
          (save-restriction
            (narrow-to-region beg end)
            (goto-char (point-min))
            (while (re-search-forward "\"" nil t)
              (replace-match "\\\\\""))))
      (print "This function operates on a region")))

  (defalias 'jm 'tja-json-mode-and-format-buffer)

  (require 'notifications)

  ;;;###autoload
  (defun tja-remind-me-in (minutes body)
    (interactive "sMinutes:\nsBody:")
    (let ((minutes (concat minutes " min")))
      (run-at-time minutes nil 'notifications-notify :title "Emacs alert" :body body)))

  (provide 'tja-misc)

#+end_src

#+RESULTS:
: tja-misc

* Org

** Org screenshot
#+begin_src emacs-lisp
  (defun tja-org-insert-image-from-wayland-clipboard ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
          (concat
           (make-temp-name
            (concat (buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (call-process "wl-paste" nil `(:file ,filename) nil "-t" "image/png")
    (insert (concat "[[" filename "]]"))
    (org-display-inline-images))

  (provide 'tja-org)
#+end_src

** Org Clock
#+begin_src emacs-lisp
  (load-file "~/emacs/my-org-clockify-report.el")
#+end_src

#+RESULTS:
: t

** Org workflow movement

#+begin_src emacs-lisp :results raw
  (defun my:org-meta-move-to-top (&optional _arg)
    "Move the item at point up to the top of the org file just after the first header"
    (interactive "P")
    (cond
     ((run-hook-with-args-until-success 'org-metaup-hook))
     ((org-region-active-p)
      (let* ((a (save-excursion
                  (goto-char (region-beginning))
                  (line-beginning-position)))
             (b (save-excursion
                  (goto-char (region-end))
                  (if (bolp) (1- (point)) (line-end-position))))
             (c (save-excursion
                  (goto-char a)
                  (move-beginning-of-line 0)
                  (point)))
             (d (save-excursion
                  (goto-char a)
                  (move-end-of-line 0)
                  (point))))
        (transpose-regions a b c d)
        (goto-char c)))
     ((org-at-table-p) (org-call-with-arg 'org-table-move-row 'up))
     ((and (featurep 'org-inlinetask)
           (org-inlinetask-in-task-p))
      (org-drag-element-backward))
     ((org-at-heading-p) (call-interactively 'org-move-subtree-up))
     ((org-at-item-p) (call-interactively 'org-move-item-up))
     (t (org-drag-element-backward))))
    (defun my:org-move-item-to-top ()
      "Move the item at point up to the top of the org file just after the first header"
      (interactive)
      (unless (org-at-item-p) (error "Not at an item"))
      (let* ((col (current-column))
             (item (line-beginning-position))
             (struct (org-list-struct))
             (prevs (org-list-prevs-alist struct))
             (prev-item (org-list-get-prev-item (line-beginning-position) struct prevs)))
        (unless (or prev-item org-list-use-circular-motion)
          (user-error "Cannot move this item further up"))
        (if (not prev-item)
            (setq struct (org-list-send-item item 'end struct))
          (setq struct (org-list-swap-items prev-item item struct)))
        (org-list-write-struct struct (org-list-parents-alist struct))
        (org-move-to-column col)))
#+end_src

#+RESULTS:
my:org-move-item-to-top

* OCR
#+begin_src emacs-lisp
  ;;;###autoload
  (defun tja-ocr-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (setq filename
          (concat
           (make-temp-name
            (concat (buffer-file-name)
                    "_"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (call-process "wl-paste" nil `(:file ,filename) nil "-t" "image/png")
    (call-process "tesseract" nil t nil filename "stdout"))

  (provide 'tja-ocr)
#+end_src

* Azure

#+begin_src emacs-lisp
  ;; set Azure UN/PW
  (load-file "~/.azure-secrets.el")

  (defun m/gsi:print-ticket-heading (ticket-number)
    (interactive "sTicket-number: ")
    (let* ((obj (m/gsi:get-azure-ticket ticket-number))
           (info (m/gsi:get-azure-ticket-title-and-id obj)))
      (insert (format "%s: %s" (car info) (cadr info)))))

  (defun m/gsi:get-azure-ticket-title-and-id (obj)
    (let* ((props (aref (cdr (cadr obj)) 0))
           (id (cdar props))
           (title (cdr (assoc 'System.Title (assoc 'fields props)))))
      (list id title)))

  (defun m/gsi:get-azure-ticket (ticket-number)
    (with-temp-buffer ; temp buffer to hold json data
      (let* ((username *MY-AZURE-UN*)
             (password *MY-AZURE-PW*)
             (api-version "7.0")
             (ticket-url (format "https://dev.azure.com/GoddardSystemsIT/_apis/wit/workitems?ids=%s&api-version=%s" ticket-number api-version))
             (url-request-extra-headers
              `(("Authorization" . ,(concat "Basic "
                                            (base64-encode-string
                                             (concat username ":" password) t))))))
        (url-insert-file-contents ticket-url))
      (json-read)))

  (defun m/gsi:get-azure-tickets (wql display-fn)
    (let* ((username *MY-AZURE-UN*)
           (password *MY-AZURE-PW*)
           (api-version "7.1-preview.2")
           (api-url (format "https://dev.azure.com/GoddardSystemsIT/_apis/wit/wiql?api-version=%s" api-version))
           (url-request-extra-headers
            `(("Content-Type" . "application/json")
              ("Authorization" . ,(concat "Basic "
                                          (base64-encode-string
                                           (concat username ":" password) t))))))
      (request
        api-url
        :type "POST"
        :sync t
        :data (json-encode `((query . ,wql)))
        :headers url-request-extra-headers
        :parser 'json-read
        :success (cl-function
                  (lambda (&key data &allow-other-keys)
                    (message (format "successfully retrieved from %s" api-url))
                    (funcall display-fn data)))
        :error (cl-function
                (lambda (&key symbol-status data error-thrown &allow-other-keys&rest _)
                  (let ((buffer (get-buffer-create "*Example.org Response*")))
                    (with-current-buffer buffer
                      (erase-buffer)
                      (insert (format "Error:\n%s" error-thrown))
                      (display-buffer buffer))))))))


  (defvar *WQL-FOR-DONE-TICKETS*
   "Select [System.Id], [System.Title], [System.State] From WorkItems
    Where ([System.WorkItemType] = 'User Story' OR [System.WorkItemType] = 'Bug')
    AND [System.TeamProject] = 'Franchisee Business Portal'
    AND [System.Tags] Contains Words 'Ready for PROD'
    AND ([System.State] = 'UAT' OR [SYSTEM.STATE] = 'Resolved')
    AND [State] <> 'Removed'
    AND [State] <> 'Closed'
    order by [System.WorkItemType] desc, [Microsoft.VSTS.Common.Priority] asc, [System.CreatedDate] desc")

  (defun m/gsi:azure-report-fbp-done-tickets ()
    (interactive)
    (cl-flet ((display-in-new-buffer (data)
                (let ((buffer (get-buffer-create "*Azure API Response*")))
                  (with-current-buffer buffer
                    (erase-buffer)
                    (when (not data)
                      (insert "No tickets to release"))
                    (insert (json-encode data))
                    (json-pretty-print-buffer)
                    (json-mode)) ; Assuming you have json-mode installed for better readability
                  (display-buffer buffer))))
      (let* ((wql *WQL-FOR-DONE-TICKETS*))
        (m/gsi:get-azure-tickets wql #'display-in-new-buffer))))

  (defun m/gsi:azure-report-fbp-done-tickets-for-changelog ()
    (interactive)
    (cl-flet ((display-id-only-in-new-buffer (data)
                (let ((work-item-ids (mapcar (lambda (item)
                                               (format "#%d" (alist-get 'id item)))
                                             (alist-get 'workItems data)))
                      (buffer (get-buffer-create "*Azure API Response - Changelog*")))
                  (with-current-buffer buffer
                    (erase-buffer)
                    (dolist (id work-item-ids)
                      (insert (format "%s\n" id)))
                    (display-buffer buffer)))))
      (let* ((wql *WQL-FOR-DONE-TICKETS*))
        (m/gsi:get-azure-tickets wql #'display-id-only-in-new-buffer))))
#+end_src

#+RESULTS:
: m/gsi/get-azure-ticket

* Azure Devops

#+begin_src emacs-lisp :results raw :wrap
  (load-file "~/.azure-secrets.el")
  (defun azure--session-call (path credentials)
     "Do a call to PATH with ARGS using current session. Does not check for session validity."
     (let ((azure-devops-v6-url "https://dev.azure.com/GoddardSystemsIT/_apis/wit/workitems?ids=12697&api-version=6.1-preview.3"))
       (apply #'request (concat azure-devops-v6-url path)
              :headers `(("Content-Type" . "application/json")
                         ("Authorization" . ,(format "Basic %s" credentials)))
              :sync t
              :parser 'json-read)))
   #+end_src

#+RESULTS:

* SQL

#+begin_src emacs-lisp
  (defun m/sql:ef-to-sql ()
    "Convert Entity Framework debug output in the current buffer to an executable SQL statement.
  Example:
  Executed DbCommand (5ms) [Parameters=[@p0='2022-12-07T00:00:00.0000000' (DbType = Date), @p1='14' (Nullable = true)], CommandType='Text', CommandTimeout='30']"
    (interactive)
    (let ((params (make-hash-table :test 'equal))
          (sql-start "SET NOCOUNT ON;")
          (case-fold-search nil)
          (param-search-regexp "@\\(p[0-9]+\\)=\\('\\([^']*\\)'\\|NULL\\)\\(,\\| \\((DbType\\|(Nullable\\|(Size\\) = \\([^)]*\\))\\)"))
      ;; Parse the parameters from the debug output and store them in the hash table
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward param-search-regexp nil t)
          (puthash
           (substring-no-properties (match-string 1))
           (substring-no-properties (match-string 2))
           params)))

      ;; Find and process the SQL statement block
      (save-excursion
        (goto-char (point-min))
        (when (re-search-forward sql-start nil t)
          (let ((start (point)))
            (goto-char (point-max))
            (let ((sql (buffer-substring start (point))))
              ;; Replace the placeholders with actual parameter values
              (maphash
               (lambda (key value)
                 (setq sql (replace-regexp-in-string (concat "@" key ",") (concat value ",") sql))
                 (setq sql (replace-regexp-in-string (concat "@" key ")") (concat value ")") sql))
                 (setq sql (replace-regexp-in-string (concat "@" key ";") (concat value ";") sql))
                 (setq sql (replace-regexp-in-string (concat "@" key "
  ") (concat value "
  ") sql))
                 )
               params)
              ;; Output the converted SQL
              (with-current-buffer (get-buffer-create "*EF-SQL*")
                (erase-buffer)
                (insert sql)
                (sql-mode)
                (display-buffer (current-buffer)))))))))

  (defun point-in-comment ()
    (let ((syn (syntax-ppss)))
      (and (nth 8 syn)
           (not (nth 3 syn)))))

  (defun m/sql:sql-capitalize-all-sqlserver-keywords (min max)
    (interactive "r")
    (require 'sql)
    (save-excursion
      (dolist (keywords sql-mode-ms-font-lock-keywords)
        (goto-char min)
        (while (re-search-forward (car keywords) nil t)
          (unless (or (point-in-comment) (> (point) max))
            (goto-char (match-beginning 0))
            (upcase-word 1))))))

                                          ;https://chatgpt.com/c/6ab254b1-9464-4509-a3a4-3313af1171e9
  (defun m/sql:run-sqlcmd-with-connection (sql-file &optional additional-params)
    "Run sqlcmd with SQL-FILE as input, using a connection from `sql-connection-alist`.
  If ADDITIONAL-PARAMS is non-nil, it is added to the sqlcmd command."
    (interactive
     (let* ((default-file (if (and (buffer-file-name)
                                   (string-suffix-p ".sql" (buffer-file-name)))
                              (file-name-nondirectory (buffer-file-name))))
            (sql-file (read-file-name "SQL File: " nil nil t default-file)))
       (list sql-file (read-string "Additional sqlcmd parameters: "))))
    (let* ((connection-name (completing-read "Choose SQL connection: "
                                             (mapcar #'car sql-connection-alist)))
           (connection-info (cdr (assoc (intern connection-name) sql-connection-alist)))
           (user (cadr (assoc 'sql-user connection-info)))
           (password (cadr (assoc 'sql-password connection-info)))
           (server (cadr (assoc 'sql-server connection-info)))
           (database (cadr (assoc 'sql-database connection-info)))
           (integrated-auth (assoc 'sql-integrated-auth connection-info))
           (command (format "sqlcmd -S %s %s -d %s -i %s %s"
                            server
                            (if integrated-auth "-E" (format "-U %s -P %s" user password))
                            database
                            sql-file
                            additional-params)))
      (unless (and server database)
        (error "Server or Database information missing for the selected connection"))
      (when (y-or-n-p (format "Execute command: %s? " command))
        (message "Running: %s" command)
        (let ((output-buffer "*SQLCMD Output*"))
          (with-current-buffer (get-buffer-create output-buffer)
            (read-only-mode -1)
            (erase-buffer)
            (shell-command command output-buffer)
            (read-only-mode 1)
            (display-buffer output-buffer))))))
#+end_src

#+RESULTS:
: m/sql:run-sqlcmd-with-connection

* Arrayify
#+begin_src emacs-lisp
  (defun arrayify (start end quote)
    "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
    (interactive "r\nMQuote: ")
    (let ((insertion
           (mapconcat
            (lambda (x) (format "%s%s%s" quote x quote))
            (split-string (buffer-substring start end)) ", ")))
      (delete-region start end)
      (insert insertion)))
#+end_src

#+RESULTS:
: arrayify

* JS Beautify

#+begin_src emacs-lisp
  ;;; js-beautify.el -- beautify some js code

  (defgroup js-beautify nil
    "Use jsbeautify to beautify some js"
    :group 'editing)

  (defcustom js-beautify-args "--keep-array-indentation"
    "Arguments to pass to jsbeautify script"
    :type '(string)
    :group 'js-beautify)

  (defcustom js-beautify-path "/usr/bin/js-beautify"
    "Path to jsbeautifier node file"
    :type '(string)
    :group 'js-beautify)

  (defun js-beautify ()
    "Beautify a region of javascript using the code from jsbeautify.org"
    (interactive)
    (let ((orig-point (point))
          (js-beautify-command (concat js-beautify-path
                                       " "
                                       js-beautify-args
                                       " "
                                       "-f -")))
      (unless (mark)
        (mark-defun))
      (shell-command-on-region (point)
                               (mark)
                               js-beautify-command
                               nil t)
      (goto-char orig-point)))

  (provide 'js-beautify)
  ;;; js-beautify.el ends here
#+end_src

#+RESULTS:
: js-beautify

* Financial

Print amortization calendar
#+begin_src emacs-lisp
  (defun openai/generate-amortization-calendar (principal rate years)
    (interactive "nPrincipal: \nnRate: \nnYears: ")
    "Generate an amortization calendar given the loan PRINCIPAL, annual interest RATE, and total YEARS of the loan."
    (let* ((monthly-rate (/ rate 1200.0))
           (total-months (* years 12))
           (payment (/ (* principal monthly-rate) (- 1 (expt (+ 1 monthly-rate) (- total-months))))))
      (insert (with-output-to-string
        (progn
          (princ (format "%-10s %-10s %-10s %-10s\n" "Month" "Payment" "Interest" "Principal"))
          (princ (make-string 50 ?-))
          (princ "\n")
          (cl-loop for month from 1 to total-months
                   for balance = principal then (- balance principal-paid)
                   for interest-paid = (* balance monthly-rate)
                   for principal-paid = (- payment interest-paid)
                   do (princ (format "%-10d %-10.2f %-10.2f %-10.2f\n" month payment interest-paid principal-paid))))))))
#+end_src

#+RESULTS:
: openai/generate-amortization-calendar

* Clockify
#+begin_src emacs-lisp :results raw
  (load-file "/home/trevor/.clockify-secrets.el")
  (load-file "/home/trevor/emacs/lisp/my-clockify.el")
#+end_src

#+RESULTS:

* Project specific functions
#+begin_src emacs-lisp :results raw
(org-babel-load-file "~/projects/extended_stay/esa-elisp.org")
#+end_src

#+RESULTS:

* Utility Functions

#+begin_src emacs-lisp
  ;; From chatgpt 2023-06-01
      ;;;###autoload

  (defun my:escape-elisp-string (string)
    "Escapes special characters in the given STRING for reading as an Emacs Lisp string."
    (replace-regexp-in-string "[\"\\\\\a\b\f\n\r\t\v]"
                              (lambda (match)
                                (cond
                                 ((string-equal match "\"") "\\\"")
                                 ((string-equal match "\\") "\\\\")
                                 ((string-equal match "\a") "\\a")
                                 ((string-equal match "\b") "\\b")
                                 ((string-equal match "\f") "\\f")
                                 ((string-equal match "\n") "\\n")
                                 ((string-equal match "\r") "\\r")
                                 ((string-equal match "\t") "\\t")
                                 ((string-equal match "\v") "\\v")))
                              string))

  ;; Also used by org-clockify-report
  (defun my:escape-quotes (string)
    "Escapes quotes in the given STRING."
    (replace-regexp-in-string "\"" "\\\\\"" string))

  (defun my:escape-quotes-in-string (input)
    "Escape quotes in the given string INPUT."
    (replace-regexp-in-string "\"" "\\\"" input))

  (defun my:escape-json-recursively (json-string)
    "Escape quotes in a JSON string, including nested JSON strings."
    (let ((json-escaped (my:escape-quotes-in-string json-string)))
      (with-temp-buffer
        (insert json-escaped)
        (goto-char (point-min))
        (while (re-search-forward "\\\\\"" nil t)
          (replace-match "\\\\\\\\\"" nil nil))
        (buffer-string))))


  (defun my:buffer-to-elisp-string-recursive ()
    "Convert the entire buffer content to an elisp string with escaped quotes, handling nested JSON escaping.
    Note: tried this for json, easier to just parse the json I think"
    (interactive)
    (let* ((buffer-content (buffer-string))
           (escaped-content (my:escape-quotes-in-string)))
      (kill-new (concat "\"" escaped-content "\""))
      (message "Buffer content converted to elisp string with recursive JSON escaping and copied to clipboard.")))

                                          ;(global-set-key (kbd "C-c e") 'my:buffer-to-elisp-string-recursive)

  ;;   ;;;###autoload
  ;; (defun my:escape-quotes (string)
  ;;   "Escapes quotes in the given STRING."
  ;;   (replace-regexp-in-string "\"" "\\\\\"" string))

  ;; (defun my:buffer-to-elisp-string ()
  ;;   "Convert the entire buffer content to an elisp string with escaped quotes."
  ;;   (interactive)
  ;;   (let* ((buffer-content (buffer-string))
  ;;          (escaped-content (my:escape-quotes buffer-content)))
  ;;     (kill-new (concat "\"" escaped-content "\""))
  ;;     (message "Buffer content converted to elisp string and copied to clipboard.")))

  ;; (defun my:list-environment-variables ()
  ;;   "List all current environment variables."
  ;;   (interactive)
  ;;   (with-output-to-temp-buffer "*Environment Variables*"
  ;;     (dolist (env process-environment)
  ;;       (princ env)
  ;;       (princ "\n"))))
#+end_src

#+RESULTS:
: my:escape-quotes

*** Utility function tests

* My keymap
#+begin_src emacs-lisp :results raw
  ;; A Ctl-c u keymap
  ;;   Ctl-c u g for GSI
  ;;   Ctl-c u e for ESA
  ;;   Ctl-c u m for Me
  (defun m/gsi:insert-school-id ()
    (interactive)
    (insert "F0EDC50F-ED22-DE11-B821-0014221C4264"))
  (defun m/esa:insert-dev-search-api ()
    (interactive)
    (insert "https://api.dev.bws.esa.com/search-results-widget-api/searchByGeo?lat=32.7766642&lng=-96.79698789999999&rooms=1&adults=1&child=0&code&rateType=ESH&checkIn=2023-10-04&checkOut=2023-10-11"))

  (defvar my-keymap (make-sparse-keymap))
  (global-set-key (kbd "C-c u") my-keymap)
  (global-set-key (kbd "C-c u R") 'recompile)
  (global-set-key (kbd "C-c u I") 'my:insert-signature-for-code)

  ;; GSI Keymap
  ;; uses leader keys for projects, t = tours, l = leads, then f5-7 run api, unit, integration tests
  (defvar gsi-keymap (make-sparse-keymap))
  (define-key gsi-keymap (kbd "e") 'm/gsi:insert-school-id)
  (define-key gsi-keymap (kbd "r") 'tja-vterm-run-fbp)
  (define-key my-keymap (kbd "g") gsi-keymap)

  (defvar tours-keymap (make-sparse-keymap))
  (define-key gsi-keymap (kbd "t") tours-keymap)
  (define-key tours-keymap (kbd "<f5>") 'm/gsi:vterm-run-tours-api)
  (define-key tours-keymap (kbd "<f6>") 'm/gsi:compile-tours-api-unit-tests)
  (define-key tours-keymap (kbd "<f7>") 'm/gsi:compile-tours-api-integration-tests)

  (defvar leads-keymap (make-sparse-keymap))
  (define-key gsi-keymap (kbd "l") leads-keymap)
  (define-key leads-keymap (kbd "<f5>") 'my:vterm-run-leads-api)
  (define-key leads-keymap (kbd "<f6>") 'my:compile-leads-api-unit-tests)
  (define-key leads-keymap (kbd "<f7>") 'my:compile-leads-api-integration-tests)

  (defvar esa-keymap (make-sparse-keymap))
  (define-key esa-keymap (kbd "a") 'm/esa:insert-dev-search-api)
  (define-key esa-keymap (kbd "d") 'my:esa:vterm-run-dotcms)
  (define-key esa-keymap (kbd "f") 'tja-vterm-esa-run-dotcms-node)
  (define-key my-keymap (kbd "e") esa-keymap)

  (global-set-key (kbd "<f5>") '(lambda () (interactive) (find-file "~/projects/extended_stay/todo_esa.org")))
#+end_src

#+RESULTS:

* Restclient

#+begin_src elisp
  (require 'restclient)
  (defun +restclient-start-new-session ()
    (interactive)
    (let ((buffer (get-buffer-create "*REST-CLIENT*")))
      (switch-to-buffer buffer)
      (restclient-mode)))
#+end_src

* Jiralib2
#+begin_src emacs-lisp :results raw
  (defun +jiralib2-extract-issue-id (issueKey)
    "Extracts the issue id from the issue key, e.g. ecomm-4952"
    (assoc 'id (jiralib2-get-issue issueKey)))

  (defun +jiralib2-extract-repository-names (issueKey)
    "Extracts repository names from the given DATA."
    (let* ((issueId (cdr (+jiralib2-extract-issue-id issueKey)))
           (issue (jiralib2-session-call (concat "/rest/dev-status/1.0/issue/detail?issueId=" issueId "&applicationType=bitbucket&dataType=pullrequest"))))
      (cl-destructuring-bind (_errors (_detail (_branches . ((_a . branches-list) . _)))) issue
        (let ((repos (mapcar (lambda (x) (cdr (assoc 'repositoryName x))) branches-list)))
          (delq nil (delete-dups repos))))))

  (defun +jiralib2-repository-names (issueKey)
    "Extracts repository names from the given DATA."
    (interactive "sIssue Key: ")
    (let* ((repositoryList (+jiralib2-extract-repository-names issueKey)))
      (insert (format "%s" repositoryList))))

  (defun my:esa:print-ticket-with-dependencies (issueKey)
    "Extracts issue name and dependencies."
    (interactive "sIssue Key: ")
    (funcall-interactively 'my:esa:print-ticket-heading issueKey)
    (let* ((repositoryList (+jiralib2-extract-repository-names issueKey)))
      (insert (format "\n%s" repositoryList))))


#+end_src

* Sly/Common Lisp
#+begin_src emacs-lisp :results raw
  ;; From chatGPT Session https://chatgpt.com/c/90d883ce-9dea-40d5-9809-1486c4146305
  (defun my:add-function-to-package (package-name function-name position)
    "Add FUNCTION-NAME to the export list of PACKAGE-NAME in packages.lisp at the given POSITION.
  POSITION should be either 'start or 'end."
    (let ((package-file "packages.lisp"))
      (with-temp-buffer
        (insert-file-contents package-file)
        (goto-char (point-min))
        (if (re-search-forward (format "(defpackage %s" package-name) nil t)
            (if (re-search-forward "(:export" nil t)
                (let ((export-start (point)))
                  (forward-sexp)
                  (backward-char)
                  (let ((export-end (point)))
                    (goto-char (if (eq position 'start) export-start export-end))
                    (if (eq position 'start)
                        (insert (format " :%s" function-name))
                      (insert (format " :%s" function-name))))
                  (write-region (point-min) (point-max) package-file))
              (message "No export list found in package %s" package-name))
          (message "No package definition found for %s" package-name)))))

  (defun my:add-current-function-to-package (package-name position)
    "Add the function at point to the export list of PACKAGE-NAME in packages.lisp at the given POSITION.
  POSITION should be either 'start or 'end."
    (interactive "sPackage name: \nSPosition (start or end): ")
    (save-excursion
      (beginning-of-defun)
      (if (looking-at "(defun \\(\\_<[^ )]+\\_>\\)")
          (let ((function-name (match-string 1)))
            (add-function-to-package package-name function-name position))
        (message "No function at point"))))

  (defun my:sly-eval-and-display (expression)
    "Evaluate the given EXPRESSION using sly-eval-async and display the result in a new buffer."
    (interactive "MExpression: ")
    (sly-eval-async
        `(cl:progn (cl:setf (cl:cdr (cl:assoc 'slynk:*string-elision-length* slynk:*slynk-pprint-bindings*)) 10000)
                   (slynk:eval-and-grab-output ,expression))
      (lambda (result)
        (let ((output-buffer (get-buffer-create "*Sly Eval Output*")))
          (with-current-buffer output-buffer
            (read-only-mode -1)
            (erase-buffer)
            (insert (cadr result))  ; (cadr result) contains the string output of the evaluation

            ;; Cleanup buffer from slynk metadata
            ;; Deletes the first quote and the last two lines with the lenght and the quote
            (goto-char (point-min))
            (delete-region (line-beginning-position) (line-beginning-position 2))
            (goto-char (point-max))
            (delete-region (line-beginning-position) (line-beginning-position 2))
            (forward-line -1)
            (delete-region (line-beginning-position) (line-beginning-position 2))
            ;; End cleanup

            ;; Temporarily set mode
            (sql-mode)
            (display-buffer output-buffer)))))
    (sly-eval-async
        `(cl:progn (cl:setf (cl:cdr (cl:assoc 'slynk:*string-elision-length* slynk:*slynk-pprint-bindings*)) 200))))
#+end_src

* EXPERIMENTAL

#+begin_src emacs-lisp

  ;;; https://gist.github.com/kristianhellquist/3082383#gistcomment-2373734
  (defun m/file:copy-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
    (interactive)
    (let ((path-with-line-number
           (concat (buffer-file-name) ":" (number-ring (line-number-at-pos)))))
      (kill-new path-with-line-number)
      (message (concat path-with-line-number " copied to clipboard"))))

  (defun m/file:copy-relative-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
    (interactive)
    (let ((path-with-line-number
           (concat (s-replace (expand-file-name (vc-root-dir)) ""  (buffer-file-name)) ":" (number-to-string (line-number-at-pos)))))
      (kill-new path-with-line-number)
      (message (concat path-with-line-number " copied to clipboard"))))

  (defun m/file:copy-project-current-line-position-to-clipboard ()
    "Copy current line in file to clipboard as '</path/to/file>:<line-number>'."
    (interactive)
    (cl-flet ((find-git-dir  ()
                          (file-truename
                           (locate-dominating-file (buffer-file-name (current-buffer)) ".git"))))
      (let* ((project-dir (find-git-dir))
            (path-with-line-number
             (concat "<proj>/" (s-replace project-dir ""  (buffer-file-name)) ":" (number-to-string (line-number-at-pos)))))
        (kill-new path-with-line-number)
        (message (concat path-with-line-number " copied to clipboard")))))

  ;;; ESA Functions to swap environments in URLs
  (defun my:replace-url-with-local ()
    (interactive)
    (let ((regex "http\[s\]*://.*?/")
          (replacement "http://localhost:8080/"))
      (while (re-search-forward regex nil t)
        (replace-match replacement))))


  ;;; ¯\_(ツ)_/¯
  (defun my:insert-shrug ()
    (interactive)
    (insert "¯\\_(ツ)_/¯"))

#+end_src

#+RESULTS:
: my:insert-shrug

* Local Variables - sets the after save hook to tangle this org file on save
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle nil t)
# End:
